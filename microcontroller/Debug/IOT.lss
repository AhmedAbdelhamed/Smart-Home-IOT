
IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000262a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024e  00800060  0000262a  000026be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000032b  008002ae  008002ae  0000290c  2**0
                  ALLOC
  3 .stab         00002e50  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f5  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006a51  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006a64  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 09 	call	0x1310	; 0x1310 <main>
      8a:	0c 94 13 13 	jmp	0x2626	; 0x2626 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:
uint8 tmp;   //tmp will store temprory received DATA(byte)




ISR(USART_RXC_vect){
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	00 90 5f 00 	lds	r0, 0x005F
      9a:	0f 92       	push	r0
      9c:	11 24       	eor	r1, r1
      9e:	2f 93       	push	r18
      a0:	3f 93       	push	r19
      a2:	4f 93       	push	r20
      a4:	5f 93       	push	r21
      a6:	6f 93       	push	r22
      a8:	7f 93       	push	r23
      aa:	8f 93       	push	r24
      ac:	9f 93       	push	r25
      ae:	af 93       	push	r26
      b0:	bf 93       	push	r27
      b2:	ef 93       	push	r30
      b4:	ff 93       	push	r31
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	1f 92       	push	r1
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
	char tmp = UART_recieveByte();
      c0:	0e 94 01 11 	call	0x2202	; 0x2202 <UART_recieveByte>
      c4:	89 83       	std	Y+1, r24	; 0x01
	switch(tmp) //check the value of the read byte
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	88 2f       	mov	r24, r24
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	8a 30       	cpi	r24, 0x0A	; 10
      ce:	91 05       	cpc	r25, r1
      d0:	19 f0       	breq	.+6      	; 0xd8 <__vector_13+0x46>
      d2:	0d 97       	sbiw	r24, 0x0d	; 13
      d4:	61 f0       	breq	.+24     	; 0xee <__vector_13+0x5c>
      d6:	14 c0       	rjmp	.+40     	; 0x100 <__vector_13+0x6e>
	 {
	   case LF: //IF NEW LINE IS FOUND
		  if(data_len > 1)  //and if there is data
      d8:	80 91 d2 05 	lds	r24, 0x05D2
      dc:	90 91 d3 05 	lds	r25, 0x05D3
      e0:	02 97       	sbiw	r24, 0x02	; 2
      e2:	20 f0       	brcs	.+8      	; 0xec <__vector_13+0x5a>
		  {
			data_ready = 1; //SET DATA READY FLAG
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	80 93 af 02 	sts	0x02AF, r24
		  }
		  break;
      ea:	1c c0       	rjmp	.+56     	; 0x124 <__vector_13+0x92>
      ec:	1b c0       	rjmp	.+54     	; 0x124 <__vector_13+0x92>
	   case CR: //IF CARRIAGE RETURN IS FOUND
		  rx_buff[data_len] = 0; //MAKE LAST ELEMENT IN BUFFER AS NULL
      ee:	80 91 d2 05 	lds	r24, 0x05D2
      f2:	90 91 d3 05 	lds	r25, 0x05D3
      f6:	84 52       	subi	r24, 0x24	; 36
      f8:	9c 4f       	sbci	r25, 0xFC	; 252
      fa:	fc 01       	movw	r30, r24
      fc:	10 82       	st	Z, r1
		  break;
      fe:	12 c0       	rjmp	.+36     	; 0x124 <__vector_13+0x92>
	   default:  //otherwise read DATA in buffer
			  rx_buff[data_len] = tmp;  //READ DATA IN BUFFER
     100:	80 91 d2 05 	lds	r24, 0x05D2
     104:	90 91 d3 05 	lds	r25, 0x05D3
     108:	84 52       	subi	r24, 0x24	; 36
     10a:	9c 4f       	sbci	r25, 0xFC	; 252
     10c:	29 81       	ldd	r18, Y+1	; 0x01
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
			  data_len++;     //INCREMENT COUNTER TO READ NEXT BYTE
     112:	80 91 d2 05 	lds	r24, 0x05D2
     116:	90 91 d3 05 	lds	r25, 0x05D3
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	90 93 d3 05 	sts	0x05D3, r25
     120:	80 93 d2 05 	sts	0x05D2, r24
	}
}
     124:	0f 90       	pop	r0
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	ff 91       	pop	r31
     12c:	ef 91       	pop	r30
     12e:	bf 91       	pop	r27
     130:	af 91       	pop	r26
     132:	9f 91       	pop	r25
     134:	8f 91       	pop	r24
     136:	7f 91       	pop	r23
     138:	6f 91       	pop	r22
     13a:	5f 91       	pop	r21
     13c:	4f 91       	pop	r20
     13e:	3f 91       	pop	r19
     140:	2f 91       	pop	r18
     142:	0f 90       	pop	r0
     144:	00 92 5f 00 	sts	0x005F, r0
     148:	0f 90       	pop	r0
     14a:	1f 90       	pop	r1
     14c:	18 95       	reti

0000014e <reset_buff>:

void reset_buff()
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
  memset(rx_buff,0,data_len); //reset buffer from first index to length used
     156:	80 91 d2 05 	lds	r24, 0x05D2
     15a:	90 91 d3 05 	lds	r25, 0x05D3
     15e:	ac 01       	movw	r20, r24
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	8c ed       	ldi	r24, 0xDC	; 220
     166:	93 e0       	ldi	r25, 0x03	; 3
     168:	0e 94 9a 12 	call	0x2534	; 0x2534 <memset>

  //reset variables used with buffer
  data_ready = 0;
     16c:	10 92 af 02 	sts	0x02AF, r1
  data_len=0;
     170:	10 92 d3 05 	sts	0x05D3, r1
     174:	10 92 d2 05 	sts	0x05D2, r1
}
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <response_success>:

uint8 response_success()
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	1f 92       	push	r1
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
  uint8 result;

  while(!data_ready); //waite until DATA buffer is ready
     188:	00 00       	nop
     18a:	80 91 af 02 	lds	r24, 0x02AF
     18e:	88 23       	and	r24, r24
     190:	e1 f3       	breq	.-8      	; 0x18a <response_success+0xc>

  if(find_string(rx_buff,"OK") == 1){result = OK;} //if "OK" is found in buffer
     192:	6a e6       	ldi	r22, 0x6A	; 106
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	8c ed       	ldi	r24, 0xDC	; 220
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	19 f4       	brne	.+6      	; 0x1a8 <response_success+0x2a>
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	89 83       	std	Y+1, r24	; 0x01
     1a6:	59 c0       	rjmp	.+178    	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"no change") == 1){result = no_change;}//if "no change" is found
     1a8:	6d e6       	ldi	r22, 0x6D	; 109
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	8c ed       	ldi	r24, 0xDC	; 220
     1ae:	93 e0       	ldi	r25, 0x03	; 3
     1b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	19 f4       	brne	.+6      	; 0x1be <response_success+0x40>
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	4e c0       	rjmp	.+156    	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"ready") == 1){result = ready;}//if "ready" is found
     1be:	67 e7       	ldi	r22, 0x77	; 119
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	8c ed       	ldi	r24, 0xDC	; 220
     1c4:	93 e0       	ldi	r25, 0x03	; 3
     1c6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	19 f4       	brne	.+6      	; 0x1d4 <response_success+0x56>
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	43 c0       	rjmp	.+134    	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,">") == 1){result = send_ready;}  //ready to receive DATA ">"
     1d4:	6d e7       	ldi	r22, 0x7D	; 125
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	8c ed       	ldi	r24, 0xDC	; 220
     1da:	93 e0       	ldi	r25, 0x03	; 3
     1dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	19 f4       	brne	.+6      	; 0x1ea <response_success+0x6c>
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	89 83       	std	Y+1, r24	; 0x01
     1e8:	38 c0       	rjmp	.+112    	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"ERROR") == 1){result = ERROR;}  //ready to receive DATA ">"
     1ea:	6f e7       	ldi	r22, 0x7F	; 127
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	8c ed       	ldi	r24, 0xDC	; 220
     1f0:	93 e0       	ldi	r25, 0x03	; 3
     1f2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     1f6:	81 30       	cpi	r24, 0x01	; 1
     1f8:	19 f4       	brne	.+6      	; 0x200 <response_success+0x82>
     1fa:	85 e0       	ldi	r24, 0x05	; 5
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	2d c0       	rjmp	.+90     	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"WIFI GOT IP") == 1){result = WIFI_GOT_IP;}//if "ready" is found
     200:	65 e8       	ldi	r22, 0x85	; 133
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	8c ed       	ldi	r24, 0xDC	; 220
     206:	93 e0       	ldi	r25, 0x03	; 3
     208:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	19 f4       	brne	.+6      	; 0x216 <response_success+0x98>
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	89 83       	std	Y+1, r24	; 0x01
     214:	22 c0       	rjmp	.+68     	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"WIFI DISCONNECT") == 1){result = WIFI_DISCONNECT;}//if "ready" is found
     216:	61 e9       	ldi	r22, 0x91	; 145
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	8c ed       	ldi	r24, 0xDC	; 220
     21c:	93 e0       	ldi	r25, 0x03	; 3
     21e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	19 f4       	brne	.+6      	; 0x22c <response_success+0xae>
     226:	87 e0       	ldi	r24, 0x07	; 7
     228:	89 83       	std	Y+1, r24	; 0x01
     22a:	17 c0       	rjmp	.+46     	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"WIFI CONNECTED") == 1){result = WIFI_CONNECTED;}//if "ready" is found
     22c:	61 ea       	ldi	r22, 0xA1	; 161
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	8c ed       	ldi	r24, 0xDC	; 220
     232:	93 e0       	ldi	r25, 0x03	; 3
     234:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	19 f4       	brne	.+6      	; 0x242 <response_success+0xc4>
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	0c c0       	rjmp	.+24     	; 0x25a <response_success+0xdc>
  else if(find_string(rx_buff,"FAIL") == 1){result = FAIL;}//if "ready" is found
     242:	60 eb       	ldi	r22, 0xB0	; 176
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	8c ed       	ldi	r24, 0xDC	; 220
     248:	93 e0       	ldi	r25, 0x03	; 3
     24a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	19 f4       	brne	.+6      	; 0x258 <response_success+0xda>
     252:	89 e0       	ldi	r24, 0x09	; 9
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	01 c0       	rjmp	.+2      	; 0x25a <response_success+0xdc>
  else result = 0; //else if other is found maybe "ERROR" or "FAIL" etc, result will be no success
     258:	19 82       	std	Y+1, r1	; 0x01

  reset_buff(); //reset buffer
     25a:	0e 94 a7 00 	call	0x14e	; 0x14e <reset_buff>

  return result;  //return the result of the response
     25e:	89 81       	ldd	r24, Y+1	; 0x01
}
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <WiFi_Config>:

void WiFi_Config()
{
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	ce 57       	subi	r28, 0x7E	; 126
     276:	d1 09       	sbc	r29, r1
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
   //reset variables
   data_ready = 0;
     282:	10 92 af 02 	sts	0x02AF, r1
   data_len = 0;
     286:	10 92 d3 05 	sts	0x05D3, r1
     28a:	10 92 d2 05 	sts	0x05D2, r1
   memset(rx_buff,0,500); //reset buffer, put 0 to all element of buffer
     28e:	44 ef       	ldi	r20, 0xF4	; 244
     290:	51 e0       	ldi	r21, 0x01	; 1
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	8c ed       	ldi	r24, 0xDC	; 220
     298:	93 e0       	ldi	r25, 0x03	; 3
     29a:	0e 94 9a 12 	call	0x2534	; 0x2534 <memset>

   LCD_clearScreen();
     29e:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
   LCD_displayStringRowColumn(0,1,"Sending AT");
     2a2:	45 eb       	ldi	r20, 0xB5	; 181
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   LCD_displayStringRowColumn(1,1,"Please wait...");
     2ae:	40 ec       	ldi	r20, 0xC0	; 192
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   UART_Write_AT("AT");   //send AT
     2ba:	8f ec       	ldi	r24, 0xCF	; 207
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	aa e7       	ldi	r26, 0x7A	; 122
     2c8:	b4 e4       	ldi	r27, 0x44	; 68
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	ab 83       	std	Y+3, r26	; 0x03
     2d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	4a ef       	ldi	r20, 0xFA	; 250
     2d8:	54 e4       	ldi	r21, 0x44	; 68
     2da:	69 81       	ldd	r22, Y+1	; 0x01
     2dc:	7a 81       	ldd	r23, Y+2	; 0x02
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	8d 83       	std	Y+5, r24	; 0x05
     2ec:	9e 83       	std	Y+6, r25	; 0x06
     2ee:	af 83       	std	Y+7, r26	; 0x07
     2f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 e8       	ldi	r20, 0x80	; 128
     2f8:	5f e3       	ldi	r21, 0x3F	; 63
     2fa:	6d 81       	ldd	r22, Y+5	; 0x05
     2fc:	7e 81       	ldd	r23, Y+6	; 0x06
     2fe:	8f 81       	ldd	r24, Y+7	; 0x07
     300:	98 85       	ldd	r25, Y+8	; 0x08
     302:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     306:	88 23       	and	r24, r24
     308:	2c f4       	brge	.+10     	; 0x314 <WiFi_Config+0xac>
		__ticks = 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	9a 87       	std	Y+10, r25	; 0x0a
     310:	89 87       	std	Y+9, r24	; 0x09
     312:	3f c0       	rjmp	.+126    	; 0x392 <WiFi_Config+0x12a>
	else if (__tmp > 65535)
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	3f ef       	ldi	r19, 0xFF	; 255
     318:	4f e7       	ldi	r20, 0x7F	; 127
     31a:	57 e4       	ldi	r21, 0x47	; 71
     31c:	6d 81       	ldd	r22, Y+5	; 0x05
     31e:	7e 81       	ldd	r23, Y+6	; 0x06
     320:	8f 81       	ldd	r24, Y+7	; 0x07
     322:	98 85       	ldd	r25, Y+8	; 0x08
     324:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     328:	18 16       	cp	r1, r24
     32a:	4c f5       	brge	.+82     	; 0x37e <WiFi_Config+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	40 e2       	ldi	r20, 0x20	; 32
     332:	51 e4       	ldi	r21, 0x41	; 65
     334:	69 81       	ldd	r22, Y+1	; 0x01
     336:	7a 81       	ldd	r23, Y+2	; 0x02
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	9c 81       	ldd	r25, Y+4	; 0x04
     33c:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	bc 01       	movw	r22, r24
     346:	cd 01       	movw	r24, r26
     348:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	9a 87       	std	Y+10, r25	; 0x0a
     352:	89 87       	std	Y+9, r24	; 0x09
     354:	0f c0       	rjmp	.+30     	; 0x374 <WiFi_Config+0x10c>
     356:	88 ec       	ldi	r24, 0xC8	; 200
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	9c 87       	std	Y+12, r25	; 0x0c
     35c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35e:	8b 85       	ldd	r24, Y+11	; 0x0b
     360:	9c 85       	ldd	r25, Y+12	; 0x0c
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <WiFi_Config+0xfa>
     366:	9c 87       	std	Y+12, r25	; 0x0c
     368:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36a:	89 85       	ldd	r24, Y+9	; 0x09
     36c:	9a 85       	ldd	r25, Y+10	; 0x0a
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     374:	89 85       	ldd	r24, Y+9	; 0x09
     376:	9a 85       	ldd	r25, Y+10	; 0x0a
     378:	89 2b       	or	r24, r25
     37a:	69 f7       	brne	.-38     	; 0x356 <WiFi_Config+0xee>
     37c:	14 c0       	rjmp	.+40     	; 0x3a6 <WiFi_Config+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37e:	6d 81       	ldd	r22, Y+5	; 0x05
     380:	7e 81       	ldd	r23, Y+6	; 0x06
     382:	8f 81       	ldd	r24, Y+7	; 0x07
     384:	98 85       	ldd	r25, Y+8	; 0x08
     386:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	9a 87       	std	Y+10, r25	; 0x0a
     390:	89 87       	std	Y+9, r24	; 0x09
     392:	89 85       	ldd	r24, Y+9	; 0x09
     394:	9a 85       	ldd	r25, Y+10	; 0x0a
     396:	9e 87       	std	Y+14, r25	; 0x0e
     398:	8d 87       	std	Y+13, r24	; 0x0d
     39a:	8d 85       	ldd	r24, Y+13	; 0x0d
     39c:	9e 85       	ldd	r25, Y+14	; 0x0e
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <WiFi_Config+0x136>
     3a2:	9e 87       	std	Y+14, r25	; 0x0e
     3a4:	8d 87       	std	Y+13, r24	; 0x0d
   _delay_ms(1000);


   UART_Write_AT("AT+RST");   //Reset WiFi module using uart
     3a6:	82 ed       	ldi	r24, 0xD2	; 210
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
   //reset_wifi(); //Reset WiFi module using PIN
   do{
	   res = response_success();
     3ae:	0e 94 bf 00 	call	0x17e	; 0x17e <response_success>
     3b2:	80 93 d8 05 	sts	0x05D8, r24
	   //(res != WIFI_GOT_IP) && (res != WIFI_DISCONNECT)
   }while(res != ready ); //wait until response success is found
     3b6:	90 91 d8 05 	lds	r25, 0x05D8
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	98 17       	cp	r25, r24
     3be:	b9 f7       	brne	.-18     	; 0x3ae <WiFi_Config+0x146>
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e8       	ldi	r25, 0x80	; 128
     3c4:	ab e3       	ldi	r26, 0x3B	; 59
     3c6:	b5 e4       	ldi	r27, 0x45	; 69
     3c8:	8f 87       	std	Y+15, r24	; 0x0f
     3ca:	98 8b       	std	Y+16, r25	; 0x10
     3cc:	a9 8b       	std	Y+17, r26	; 0x11
     3ce:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4a ef       	ldi	r20, 0xFA	; 250
     3d6:	54 e4       	ldi	r21, 0x44	; 68
     3d8:	6f 85       	ldd	r22, Y+15	; 0x0f
     3da:	78 89       	ldd	r23, Y+16	; 0x10
     3dc:	89 89       	ldd	r24, Y+17	; 0x11
     3de:	9a 89       	ldd	r25, Y+18	; 0x12
     3e0:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	8b 8b       	std	Y+19, r24	; 0x13
     3ea:	9c 8b       	std	Y+20, r25	; 0x14
     3ec:	ad 8b       	std	Y+21, r26	; 0x15
     3ee:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e8       	ldi	r20, 0x80	; 128
     3f6:	5f e3       	ldi	r21, 0x3F	; 63
     3f8:	6b 89       	ldd	r22, Y+19	; 0x13
     3fa:	7c 89       	ldd	r23, Y+20	; 0x14
     3fc:	8d 89       	ldd	r24, Y+21	; 0x15
     3fe:	9e 89       	ldd	r25, Y+22	; 0x16
     400:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     404:	88 23       	and	r24, r24
     406:	2c f4       	brge	.+10     	; 0x412 <WiFi_Config+0x1aa>
		__ticks = 1;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	98 8f       	std	Y+24, r25	; 0x18
     40e:	8f 8b       	std	Y+23, r24	; 0x17
     410:	3f c0       	rjmp	.+126    	; 0x490 <WiFi_Config+0x228>
	else if (__tmp > 65535)
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	3f ef       	ldi	r19, 0xFF	; 255
     416:	4f e7       	ldi	r20, 0x7F	; 127
     418:	57 e4       	ldi	r21, 0x47	; 71
     41a:	6b 89       	ldd	r22, Y+19	; 0x13
     41c:	7c 89       	ldd	r23, Y+20	; 0x14
     41e:	8d 89       	ldd	r24, Y+21	; 0x15
     420:	9e 89       	ldd	r25, Y+22	; 0x16
     422:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     426:	18 16       	cp	r1, r24
     428:	4c f5       	brge	.+82     	; 0x47c <WiFi_Config+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     42a:	20 e0       	ldi	r18, 0x00	; 0
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	40 e2       	ldi	r20, 0x20	; 32
     430:	51 e4       	ldi	r21, 0x41	; 65
     432:	6f 85       	ldd	r22, Y+15	; 0x0f
     434:	78 89       	ldd	r23, Y+16	; 0x10
     436:	89 89       	ldd	r24, Y+17	; 0x11
     438:	9a 89       	ldd	r25, Y+18	; 0x12
     43a:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	bc 01       	movw	r22, r24
     444:	cd 01       	movw	r24, r26
     446:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	98 8f       	std	Y+24, r25	; 0x18
     450:	8f 8b       	std	Y+23, r24	; 0x17
     452:	0f c0       	rjmp	.+30     	; 0x472 <WiFi_Config+0x20a>
     454:	88 ec       	ldi	r24, 0xC8	; 200
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	9a 8f       	std	Y+26, r25	; 0x1a
     45a:	89 8f       	std	Y+25, r24	; 0x19
     45c:	89 8d       	ldd	r24, Y+25	; 0x19
     45e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	f1 f7       	brne	.-4      	; 0x460 <WiFi_Config+0x1f8>
     464:	9a 8f       	std	Y+26, r25	; 0x1a
     466:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     468:	8f 89       	ldd	r24, Y+23	; 0x17
     46a:	98 8d       	ldd	r25, Y+24	; 0x18
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	98 8f       	std	Y+24, r25	; 0x18
     470:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     472:	8f 89       	ldd	r24, Y+23	; 0x17
     474:	98 8d       	ldd	r25, Y+24	; 0x18
     476:	89 2b       	or	r24, r25
     478:	69 f7       	brne	.-38     	; 0x454 <WiFi_Config+0x1ec>
     47a:	14 c0       	rjmp	.+40     	; 0x4a4 <WiFi_Config+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     47c:	6b 89       	ldd	r22, Y+19	; 0x13
     47e:	7c 89       	ldd	r23, Y+20	; 0x14
     480:	8d 89       	ldd	r24, Y+21	; 0x15
     482:	9e 89       	ldd	r25, Y+22	; 0x16
     484:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	98 8f       	std	Y+24, r25	; 0x18
     48e:	8f 8b       	std	Y+23, r24	; 0x17
     490:	8f 89       	ldd	r24, Y+23	; 0x17
     492:	98 8d       	ldd	r25, Y+24	; 0x18
     494:	9c 8f       	std	Y+28, r25	; 0x1c
     496:	8b 8f       	std	Y+27, r24	; 0x1b
     498:	8b 8d       	ldd	r24, Y+27	; 0x1b
     49a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <WiFi_Config+0x234>
     4a0:	9c 8f       	std	Y+28, r25	; 0x1c
     4a2:	8b 8f       	std	Y+27, r24	; 0x1b
   _delay_ms(3000);

   //Disconnect from any AP at the beginning
   LCD_clearScreen();
     4a4:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
   LCD_displayStringRowColumn(0,1,"Disconnecting WIFI");
     4a8:	49 ed       	ldi	r20, 0xD9	; 217
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   LCD_displayStringRowColumn(1,1,"Please wait...");
     4b4:	40 ec       	ldi	r20, 0xC0	; 192
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   UART_Write_AT("AT+CWQAP");   //Disconnect from any AP at the beginning
     4c0:	8c ee       	ldi	r24, 0xEC	; 236
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	aa e7       	ldi	r26, 0x7A	; 122
     4ce:	b4 e4       	ldi	r27, 0x44	; 68
     4d0:	8d 8f       	std	Y+29, r24	; 0x1d
     4d2:	9e 8f       	std	Y+30, r25	; 0x1e
     4d4:	af 8f       	std	Y+31, r26	; 0x1f
     4d6:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	4a ef       	ldi	r20, 0xFA	; 250
     4de:	54 e4       	ldi	r21, 0x44	; 68
     4e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     4e2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4e6:	98 a1       	ldd	r25, Y+32	; 0x20
     4e8:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	89 a3       	std	Y+33, r24	; 0x21
     4f2:	9a a3       	std	Y+34, r25	; 0x22
     4f4:	ab a3       	std	Y+35, r26	; 0x23
     4f6:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e8       	ldi	r20, 0x80	; 128
     4fe:	5f e3       	ldi	r21, 0x3F	; 63
     500:	69 a1       	ldd	r22, Y+33	; 0x21
     502:	7a a1       	ldd	r23, Y+34	; 0x22
     504:	8b a1       	ldd	r24, Y+35	; 0x23
     506:	9c a1       	ldd	r25, Y+36	; 0x24
     508:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     50c:	88 23       	and	r24, r24
     50e:	2c f4       	brge	.+10     	; 0x51a <WiFi_Config+0x2b2>
		__ticks = 1;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	9e a3       	std	Y+38, r25	; 0x26
     516:	8d a3       	std	Y+37, r24	; 0x25
     518:	3f c0       	rjmp	.+126    	; 0x598 <WiFi_Config+0x330>
	else if (__tmp > 65535)
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	3f ef       	ldi	r19, 0xFF	; 255
     51e:	4f e7       	ldi	r20, 0x7F	; 127
     520:	57 e4       	ldi	r21, 0x47	; 71
     522:	69 a1       	ldd	r22, Y+33	; 0x21
     524:	7a a1       	ldd	r23, Y+34	; 0x22
     526:	8b a1       	ldd	r24, Y+35	; 0x23
     528:	9c a1       	ldd	r25, Y+36	; 0x24
     52a:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     52e:	18 16       	cp	r1, r24
     530:	4c f5       	brge	.+82     	; 0x584 <WiFi_Config+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e2       	ldi	r20, 0x20	; 32
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     53c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     53e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     540:	98 a1       	ldd	r25, Y+32	; 0x20
     542:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	bc 01       	movw	r22, r24
     54c:	cd 01       	movw	r24, r26
     54e:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	9e a3       	std	Y+38, r25	; 0x26
     558:	8d a3       	std	Y+37, r24	; 0x25
     55a:	0f c0       	rjmp	.+30     	; 0x57a <WiFi_Config+0x312>
     55c:	88 ec       	ldi	r24, 0xC8	; 200
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	98 a7       	std	Y+40, r25	; 0x28
     562:	8f a3       	std	Y+39, r24	; 0x27
     564:	8f a1       	ldd	r24, Y+39	; 0x27
     566:	98 a5       	ldd	r25, Y+40	; 0x28
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <WiFi_Config+0x300>
     56c:	98 a7       	std	Y+40, r25	; 0x28
     56e:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     570:	8d a1       	ldd	r24, Y+37	; 0x25
     572:	9e a1       	ldd	r25, Y+38	; 0x26
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	9e a3       	std	Y+38, r25	; 0x26
     578:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57a:	8d a1       	ldd	r24, Y+37	; 0x25
     57c:	9e a1       	ldd	r25, Y+38	; 0x26
     57e:	89 2b       	or	r24, r25
     580:	69 f7       	brne	.-38     	; 0x55c <WiFi_Config+0x2f4>
     582:	14 c0       	rjmp	.+40     	; 0x5ac <WiFi_Config+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     584:	69 a1       	ldd	r22, Y+33	; 0x21
     586:	7a a1       	ldd	r23, Y+34	; 0x22
     588:	8b a1       	ldd	r24, Y+35	; 0x23
     58a:	9c a1       	ldd	r25, Y+36	; 0x24
     58c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	9e a3       	std	Y+38, r25	; 0x26
     596:	8d a3       	std	Y+37, r24	; 0x25
     598:	8d a1       	ldd	r24, Y+37	; 0x25
     59a:	9e a1       	ldd	r25, Y+38	; 0x26
     59c:	9a a7       	std	Y+42, r25	; 0x2a
     59e:	89 a7       	std	Y+41, r24	; 0x29
     5a0:	89 a5       	ldd	r24, Y+41	; 0x29
     5a2:	9a a5       	ldd	r25, Y+42	; 0x2a
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <WiFi_Config+0x33c>
     5a8:	9a a7       	std	Y+42, r25	; 0x2a
     5aa:	89 a7       	std	Y+41, r24	; 0x29
   _delay_ms(1000);

   //set the working mode to 3 both station mode and AP
   LCD_clearScreen();
     5ac:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
   LCD_displayStringRowColumn(0,1,"Setting mode");
     5b0:	45 ef       	ldi	r20, 0xF5	; 245
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   LCD_displayStringRowColumn(1,1,"Please wait...");
     5bc:	40 ec       	ldi	r20, 0xC0	; 192
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   UART_Write_AT("AT+CWMODE=3");   //select both station and access point mode
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
   while(response_success() != OK);   //wait until response success is found
     5d0:	00 00       	nop
     5d2:	0e 94 bf 00 	call	0x17e	; 0x17e <response_success>
     5d6:	98 2f       	mov	r25, r24
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	98 17       	cp	r25, r24
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <WiFi_Config+0x36a>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	aa e7       	ldi	r26, 0x7A	; 122
     5e4:	b4 e4       	ldi	r27, 0x44	; 68
     5e6:	8b a7       	std	Y+43, r24	; 0x2b
     5e8:	9c a7       	std	Y+44, r25	; 0x2c
     5ea:	ad a7       	std	Y+45, r26	; 0x2d
     5ec:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4a ef       	ldi	r20, 0xFA	; 250
     5f4:	54 e4       	ldi	r21, 0x44	; 68
     5f6:	6b a5       	ldd	r22, Y+43	; 0x2b
     5f8:	7c a5       	ldd	r23, Y+44	; 0x2c
     5fa:	8d a5       	ldd	r24, Y+45	; 0x2d
     5fc:	9e a5       	ldd	r25, Y+46	; 0x2e
     5fe:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	8f a7       	std	Y+47, r24	; 0x2f
     608:	98 ab       	std	Y+48, r25	; 0x30
     60a:	a9 ab       	std	Y+49, r26	; 0x31
     60c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	40 e8       	ldi	r20, 0x80	; 128
     614:	5f e3       	ldi	r21, 0x3F	; 63
     616:	6f a5       	ldd	r22, Y+47	; 0x2f
     618:	78 a9       	ldd	r23, Y+48	; 0x30
     61a:	89 a9       	ldd	r24, Y+49	; 0x31
     61c:	9a a9       	ldd	r25, Y+50	; 0x32
     61e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     622:	88 23       	and	r24, r24
     624:	2c f4       	brge	.+10     	; 0x630 <WiFi_Config+0x3c8>
		__ticks = 1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	9c ab       	std	Y+52, r25	; 0x34
     62c:	8b ab       	std	Y+51, r24	; 0x33
     62e:	3f c0       	rjmp	.+126    	; 0x6ae <WiFi_Config+0x446>
	else if (__tmp > 65535)
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	3f ef       	ldi	r19, 0xFF	; 255
     634:	4f e7       	ldi	r20, 0x7F	; 127
     636:	57 e4       	ldi	r21, 0x47	; 71
     638:	6f a5       	ldd	r22, Y+47	; 0x2f
     63a:	78 a9       	ldd	r23, Y+48	; 0x30
     63c:	89 a9       	ldd	r24, Y+49	; 0x31
     63e:	9a a9       	ldd	r25, Y+50	; 0x32
     640:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     644:	18 16       	cp	r1, r24
     646:	4c f5       	brge	.+82     	; 0x69a <WiFi_Config+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e2       	ldi	r20, 0x20	; 32
     64e:	51 e4       	ldi	r21, 0x41	; 65
     650:	6b a5       	ldd	r22, Y+43	; 0x2b
     652:	7c a5       	ldd	r23, Y+44	; 0x2c
     654:	8d a5       	ldd	r24, Y+45	; 0x2d
     656:	9e a5       	ldd	r25, Y+46	; 0x2e
     658:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	bc 01       	movw	r22, r24
     662:	cd 01       	movw	r24, r26
     664:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	9c ab       	std	Y+52, r25	; 0x34
     66e:	8b ab       	std	Y+51, r24	; 0x33
     670:	0f c0       	rjmp	.+30     	; 0x690 <WiFi_Config+0x428>
     672:	88 ec       	ldi	r24, 0xC8	; 200
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9e ab       	std	Y+54, r25	; 0x36
     678:	8d ab       	std	Y+53, r24	; 0x35
     67a:	8d a9       	ldd	r24, Y+53	; 0x35
     67c:	9e a9       	ldd	r25, Y+54	; 0x36
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <WiFi_Config+0x416>
     682:	9e ab       	std	Y+54, r25	; 0x36
     684:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     686:	8b a9       	ldd	r24, Y+51	; 0x33
     688:	9c a9       	ldd	r25, Y+52	; 0x34
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	9c ab       	std	Y+52, r25	; 0x34
     68e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     690:	8b a9       	ldd	r24, Y+51	; 0x33
     692:	9c a9       	ldd	r25, Y+52	; 0x34
     694:	89 2b       	or	r24, r25
     696:	69 f7       	brne	.-38     	; 0x672 <WiFi_Config+0x40a>
     698:	14 c0       	rjmp	.+40     	; 0x6c2 <WiFi_Config+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     69a:	6f a5       	ldd	r22, Y+47	; 0x2f
     69c:	78 a9       	ldd	r23, Y+48	; 0x30
     69e:	89 a9       	ldd	r24, Y+49	; 0x31
     6a0:	9a a9       	ldd	r25, Y+50	; 0x32
     6a2:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	9c ab       	std	Y+52, r25	; 0x34
     6ac:	8b ab       	std	Y+51, r24	; 0x33
     6ae:	8b a9       	ldd	r24, Y+51	; 0x33
     6b0:	9c a9       	ldd	r25, Y+52	; 0x34
     6b2:	98 af       	std	Y+56, r25	; 0x38
     6b4:	8f ab       	std	Y+55, r24	; 0x37
     6b6:	8f a9       	ldd	r24, Y+55	; 0x37
     6b8:	98 ad       	ldd	r25, Y+56	; 0x38
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <WiFi_Config+0x452>
     6be:	98 af       	std	Y+56, r25	; 0x38
     6c0:	8f ab       	std	Y+55, r24	; 0x37
   _delay_ms(1000);

   //Enable multiple or single connections
   LCD_clearScreen();
     6c2:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
   LCD_displayStringRowColumn(0,1,"Setting connection");
     6c6:	4e e0       	ldi	r20, 0x0E	; 14
     6c8:	51 e0       	ldi	r21, 0x01	; 1
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   LCD_displayStringRowColumn(1,1,"mode");
     6d2:	41 e2       	ldi	r20, 0x21	; 33
     6d4:	51 e0       	ldi	r21, 0x01	; 1
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   LCD_displayStringRowColumn(1,6,"Please wait...");
     6de:	40 ec       	ldi	r20, 0xC0	; 192
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	66 e0       	ldi	r22, 0x06	; 6
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
   UART_Write_AT("AT+CIPMUX=1");  //Enable multiple connection
     6ea:	86 e2       	ldi	r24, 0x26	; 38
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
   while(response_success() != OK); //wait until response success is found
     6f2:	00 00       	nop
     6f4:	0e 94 bf 00 	call	0x17e	; 0x17e <response_success>
     6f8:	98 2f       	mov	r25, r24
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	98 17       	cp	r25, r24
     6fe:	d1 f7       	brne	.-12     	; 0x6f4 <WiFi_Config+0x48c>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	aa e7       	ldi	r26, 0x7A	; 122
     706:	b4 e4       	ldi	r27, 0x44	; 68
     708:	89 af       	std	Y+57, r24	; 0x39
     70a:	9a af       	std	Y+58, r25	; 0x3a
     70c:	ab af       	std	Y+59, r26	; 0x3b
     70e:	bc af       	std	Y+60, r27	; 0x3c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	4a ef       	ldi	r20, 0xFA	; 250
     716:	54 e4       	ldi	r21, 0x44	; 68
     718:	69 ad       	ldd	r22, Y+57	; 0x39
     71a:	7a ad       	ldd	r23, Y+58	; 0x3a
     71c:	8b ad       	ldd	r24, Y+59	; 0x3b
     71e:	9c ad       	ldd	r25, Y+60	; 0x3c
     720:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	9e 01       	movw	r18, r28
     72a:	23 5c       	subi	r18, 0xC3	; 195
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	f9 01       	movw	r30, r18
     730:	80 83       	st	Z, r24
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	a2 83       	std	Z+2, r26	; 0x02
     736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	ce 01       	movw	r24, r28
     742:	cd 96       	adiw	r24, 0x3d	; 61
     744:	fc 01       	movw	r30, r24
     746:	60 81       	ld	r22, Z
     748:	71 81       	ldd	r23, Z+1	; 0x01
     74a:	82 81       	ldd	r24, Z+2	; 0x02
     74c:	93 81       	ldd	r25, Z+3	; 0x03
     74e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     752:	88 23       	and	r24, r24
     754:	4c f4       	brge	.+18     	; 0x768 <WiFi_Config+0x500>
		__ticks = 1;
     756:	ce 01       	movw	r24, r28
     758:	8f 5b       	subi	r24, 0xBF	; 191
     75a:	9f 4f       	sbci	r25, 0xFF	; 255
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	fc 01       	movw	r30, r24
     762:	31 83       	std	Z+1, r19	; 0x01
     764:	20 83       	st	Z, r18
     766:	67 c0       	rjmp	.+206    	; 0x836 <WiFi_Config+0x5ce>
	else if (__tmp > 65535)
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	3f ef       	ldi	r19, 0xFF	; 255
     76c:	4f e7       	ldi	r20, 0x7F	; 127
     76e:	57 e4       	ldi	r21, 0x47	; 71
     770:	ce 01       	movw	r24, r28
     772:	cd 96       	adiw	r24, 0x3d	; 61
     774:	fc 01       	movw	r30, r24
     776:	60 81       	ld	r22, Z
     778:	71 81       	ldd	r23, Z+1	; 0x01
     77a:	82 81       	ldd	r24, Z+2	; 0x02
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     782:	18 16       	cp	r1, r24
     784:	0c f0       	brlt	.+2      	; 0x788 <WiFi_Config+0x520>
     786:	46 c0       	rjmp	.+140    	; 0x814 <WiFi_Config+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e2       	ldi	r20, 0x20	; 32
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	69 ad       	ldd	r22, Y+57	; 0x39
     792:	7a ad       	ldd	r23, Y+58	; 0x3a
     794:	8b ad       	ldd	r24, Y+59	; 0x3b
     796:	9c ad       	ldd	r25, Y+60	; 0x3c
     798:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	8e 01       	movw	r16, r28
     7a2:	0f 5b       	subi	r16, 0xBF	; 191
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	bc 01       	movw	r22, r24
     7a8:	cd 01       	movw	r24, r26
     7aa:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	f8 01       	movw	r30, r16
     7b4:	91 83       	std	Z+1, r25	; 0x01
     7b6:	80 83       	st	Z, r24
     7b8:	24 c0       	rjmp	.+72     	; 0x802 <WiFi_Config+0x59a>
     7ba:	ce 01       	movw	r24, r28
     7bc:	8d 5b       	subi	r24, 0xBD	; 189
     7be:	9f 4f       	sbci	r25, 0xFF	; 255
     7c0:	28 ec       	ldi	r18, 0xC8	; 200
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	31 83       	std	Z+1, r19	; 0x01
     7c8:	20 83       	st	Z, r18
     7ca:	ce 01       	movw	r24, r28
     7cc:	8d 5b       	subi	r24, 0xBD	; 189
     7ce:	9f 4f       	sbci	r25, 0xFF	; 255
     7d0:	fc 01       	movw	r30, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <WiFi_Config+0x56e>
     7da:	9e 01       	movw	r18, r28
     7dc:	2d 5b       	subi	r18, 0xBD	; 189
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	f9 01       	movw	r30, r18
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	ce 01       	movw	r24, r28
     7e8:	8f 5b       	subi	r24, 0xBF	; 191
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	9e 01       	movw	r18, r28
     7ee:	2f 5b       	subi	r18, 0xBF	; 191
     7f0:	3f 4f       	sbci	r19, 0xFF	; 255
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	31 81       	ldd	r19, Z+1	; 0x01
     7f8:	21 50       	subi	r18, 0x01	; 1
     7fa:	31 09       	sbc	r19, r1
     7fc:	fc 01       	movw	r30, r24
     7fe:	31 83       	std	Z+1, r19	; 0x01
     800:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     802:	ce 01       	movw	r24, r28
     804:	8f 5b       	subi	r24, 0xBF	; 191
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	89 2b       	or	r24, r25
     810:	a1 f6       	brne	.-88     	; 0x7ba <WiFi_Config+0x552>
     812:	2b c0       	rjmp	.+86     	; 0x86a <__stack+0xb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     814:	8e 01       	movw	r16, r28
     816:	0f 5b       	subi	r16, 0xBF	; 191
     818:	1f 4f       	sbci	r17, 0xFF	; 255
     81a:	ce 01       	movw	r24, r28
     81c:	cd 96       	adiw	r24, 0x3d	; 61
     81e:	fc 01       	movw	r30, r24
     820:	60 81       	ld	r22, Z
     822:	71 81       	ldd	r23, Z+1	; 0x01
     824:	82 81       	ldd	r24, Z+2	; 0x02
     826:	93 81       	ldd	r25, Z+3	; 0x03
     828:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	f8 01       	movw	r30, r16
     832:	91 83       	std	Z+1, r25	; 0x01
     834:	80 83       	st	Z, r24
     836:	ce 01       	movw	r24, r28
     838:	8b 5b       	subi	r24, 0xBB	; 187
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	9e 01       	movw	r18, r28
     83e:	2f 5b       	subi	r18, 0xBF	; 191
     840:	3f 4f       	sbci	r19, 0xFF	; 255
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	31 81       	ldd	r19, Z+1	; 0x01
     848:	fc 01       	movw	r30, r24
     84a:	31 83       	std	Z+1, r19	; 0x01
     84c:	20 83       	st	Z, r18
     84e:	ce 01       	movw	r24, r28
     850:	8b 5b       	subi	r24, 0xBB	; 187
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <WiFi_Config+0x5f2>
     85e:	9e 01       	movw	r18, r28
     860:	2b 5b       	subi	r18, 0xBB	; 187
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	f9 01       	movw	r30, r18
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	80 83       	st	Z, r24

   //infinit loop to join access point
   while(1)
   {
	 //AT+CWJAP="medo-PC","01150535088"
     LCD_clearScreen();
     86a:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
     LCD_displayStringRowColumn(0,1,"Connecting to AP");
     86e:	42 e3       	ldi	r20, 0x32	; 50
     870:	51 e0       	ldi	r21, 0x01	; 1
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
     LCD_displayStringRowColumn(1,1,"Please wait...");
     87a:	40 ec       	ldi	r20, 0xC0	; 192
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
     UART_sendString("AT+CWJAP=");    //AT+CWJAP="SAMEER.STC","0530sameer"
     886:	83 e4       	ldi	r24, 0x43	; 67
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_sendString>
     UART_sendByte('"');
     88e:	82 e2       	ldi	r24, 0x22	; 34
     890:	0e 94 e7 10 	call	0x21ce	; 0x21ce <UART_sendByte>
     UART_sendString(SSID);
     894:	8b e2       	ldi	r24, 0x2B	; 43
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_sendString>
     UART_sendString("\",\"");
     89c:	8d e4       	ldi	r24, 0x4D	; 77
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_sendString>
     UART_sendString(password);
     8a4:	8f e2       	ldi	r24, 0x2F	; 47
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_sendString>
     UART_sendByte('"');
     8ac:	82 e2       	ldi	r24, 0x22	; 34
     8ae:	0e 94 e7 10 	call	0x21ce	; 0x21ce <UART_sendByte>
     new_line();
     8b2:	0e 94 2d 0b 	call	0x165a	; 0x165a <new_line>
     8b6:	9e 01       	movw	r18, r28
     8b8:	29 5b       	subi	r18, 0xB9	; 185
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	aa ef       	ldi	r26, 0xFA	; 250
     8c2:	b4 e4       	ldi	r27, 0x44	; 68
     8c4:	f9 01       	movw	r30, r18
     8c6:	80 83       	st	Z, r24
     8c8:	91 83       	std	Z+1, r25	; 0x01
     8ca:	a2 83       	std	Z+2, r26	; 0x02
     8cc:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8ce:	8e 01       	movw	r16, r28
     8d0:	05 5b       	subi	r16, 0xB5	; 181
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	ce 01       	movw	r24, r28
     8d6:	89 5b       	subi	r24, 0xB9	; 185
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	4a ef       	ldi	r20, 0xFA	; 250
     8e0:	54 e4       	ldi	r21, 0x44	; 68
     8e2:	fc 01       	movw	r30, r24
     8e4:	60 81       	ld	r22, Z
     8e6:	71 81       	ldd	r23, Z+1	; 0x01
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     8f0:	dc 01       	movw	r26, r24
     8f2:	cb 01       	movw	r24, r22
     8f4:	f8 01       	movw	r30, r16
     8f6:	80 83       	st	Z, r24
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	a2 83       	std	Z+2, r26	; 0x02
     8fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8fe:	ce 01       	movw	r24, r28
     900:	85 5b       	subi	r24, 0xB5	; 181
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e8       	ldi	r20, 0x80	; 128
     90a:	5f e3       	ldi	r21, 0x3F	; 63
     90c:	fc 01       	movw	r30, r24
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     91a:	88 23       	and	r24, r24
     91c:	4c f4       	brge	.+18     	; 0x930 <__stack+0xd1>
		__ticks = 1;
     91e:	ce 01       	movw	r24, r28
     920:	81 5b       	subi	r24, 0xB1	; 177
     922:	9f 4f       	sbci	r25, 0xFF	; 255
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	31 83       	std	Z+1, r19	; 0x01
     92c:	20 83       	st	Z, r18
     92e:	6d c0       	rjmp	.+218    	; 0xa0a <__stack+0x1ab>
	else if (__tmp > 65535)
     930:	ce 01       	movw	r24, r28
     932:	85 5b       	subi	r24, 0xB5	; 181
     934:	9f 4f       	sbci	r25, 0xFF	; 255
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	3f ef       	ldi	r19, 0xFF	; 255
     93a:	4f e7       	ldi	r20, 0x7F	; 127
     93c:	57 e4       	ldi	r21, 0x47	; 71
     93e:	fc 01       	movw	r30, r24
     940:	60 81       	ld	r22, Z
     942:	71 81       	ldd	r23, Z+1	; 0x01
     944:	82 81       	ldd	r24, Z+2	; 0x02
     946:	93 81       	ldd	r25, Z+3	; 0x03
     948:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     94c:	18 16       	cp	r1, r24
     94e:	0c f0       	brlt	.+2      	; 0x952 <__stack+0xf3>
     950:	4a c0       	rjmp	.+148    	; 0x9e6 <__stack+0x187>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     952:	ce 01       	movw	r24, r28
     954:	89 5b       	subi	r24, 0xB9	; 185
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e2       	ldi	r20, 0x20	; 32
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	fc 01       	movw	r30, r24
     962:	60 81       	ld	r22, Z
     964:	71 81       	ldd	r23, Z+1	; 0x01
     966:	82 81       	ldd	r24, Z+2	; 0x02
     968:	93 81       	ldd	r25, Z+3	; 0x03
     96a:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     96e:	dc 01       	movw	r26, r24
     970:	cb 01       	movw	r24, r22
     972:	8e 01       	movw	r16, r28
     974:	01 5b       	subi	r16, 0xB1	; 177
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	f8 01       	movw	r30, r16
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	80 83       	st	Z, r24
     98a:	24 c0       	rjmp	.+72     	; 0x9d4 <__stack+0x175>
     98c:	ce 01       	movw	r24, r28
     98e:	8f 5a       	subi	r24, 0xAF	; 175
     990:	9f 4f       	sbci	r25, 0xFF	; 255
     992:	28 ec       	ldi	r18, 0xC8	; 200
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	31 83       	std	Z+1, r19	; 0x01
     99a:	20 83       	st	Z, r18
     99c:	ce 01       	movw	r24, r28
     99e:	8f 5a       	subi	r24, 0xAF	; 175
     9a0:	9f 4f       	sbci	r25, 0xFF	; 255
     9a2:	fc 01       	movw	r30, r24
     9a4:	80 81       	ld	r24, Z
     9a6:	91 81       	ldd	r25, Z+1	; 0x01
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <__stack+0x149>
     9ac:	9e 01       	movw	r18, r28
     9ae:	2f 5a       	subi	r18, 0xAF	; 175
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	f9 01       	movw	r30, r18
     9b4:	91 83       	std	Z+1, r25	; 0x01
     9b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b8:	ce 01       	movw	r24, r28
     9ba:	81 5b       	subi	r24, 0xB1	; 177
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	9e 01       	movw	r18, r28
     9c0:	21 5b       	subi	r18, 0xB1	; 177
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	f9 01       	movw	r30, r18
     9c6:	20 81       	ld	r18, Z
     9c8:	31 81       	ldd	r19, Z+1	; 0x01
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	31 09       	sbc	r19, r1
     9ce:	fc 01       	movw	r30, r24
     9d0:	31 83       	std	Z+1, r19	; 0x01
     9d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d4:	ce 01       	movw	r24, r28
     9d6:	81 5b       	subi	r24, 0xB1	; 177
     9d8:	9f 4f       	sbci	r25, 0xFF	; 255
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	89 2b       	or	r24, r25
     9e2:	a1 f6       	brne	.-88     	; 0x98c <__stack+0x12d>
     9e4:	2c c0       	rjmp	.+88     	; 0xa3e <__stack+0x1df>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9e6:	8e 01       	movw	r16, r28
     9e8:	01 5b       	subi	r16, 0xB1	; 177
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	ce 01       	movw	r24, r28
     9ee:	85 5b       	subi	r24, 0xB5	; 181
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	fc 01       	movw	r30, r24
     9f4:	60 81       	ld	r22, Z
     9f6:	71 81       	ldd	r23, Z+1	; 0x01
     9f8:	82 81       	ldd	r24, Z+2	; 0x02
     9fa:	93 81       	ldd	r25, Z+3	; 0x03
     9fc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	f8 01       	movw	r30, r16
     a06:	91 83       	std	Z+1, r25	; 0x01
     a08:	80 83       	st	Z, r24
     a0a:	ce 01       	movw	r24, r28
     a0c:	8d 5a       	subi	r24, 0xAD	; 173
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	9e 01       	movw	r18, r28
     a12:	21 5b       	subi	r18, 0xB1	; 177
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	f9 01       	movw	r30, r18
     a18:	20 81       	ld	r18, Z
     a1a:	31 81       	ldd	r19, Z+1	; 0x01
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	ce 01       	movw	r24, r28
     a24:	8d 5a       	subi	r24, 0xAD	; 173
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <__stack+0x1cf>
     a32:	9e 01       	movw	r18, r28
     a34:	2d 5a       	subi	r18, 0xAD	; 173
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	f9 01       	movw	r30, r18
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
     _delay_ms(2000);
     do
    	 res = response_success();
     a3e:	0e 94 bf 00 	call	0x17e	; 0x17e <response_success>
     a42:	80 93 d8 05 	sts	0x05D8, r24
     while((res != OK) && (res != ERROR) && (res != FAIL));
     a46:	90 91 d8 05 	lds	r25, 0x05D8
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	98 17       	cp	r25, r24
     a4e:	51 f0       	breq	.+20     	; 0xa64 <__stack+0x205>
     a50:	90 91 d8 05 	lds	r25, 0x05D8
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	98 17       	cp	r25, r24
     a58:	29 f0       	breq	.+10     	; 0xa64 <__stack+0x205>
     a5a:	90 91 d8 05 	lds	r25, 0x05D8
     a5e:	89 e0       	ldi	r24, 0x09	; 9
     a60:	98 17       	cp	r25, r24
     a62:	69 f7       	brne	.-38     	; 0xa3e <__stack+0x1df>
     if(res == OK) //if response success is found
     a64:	90 91 d8 05 	lds	r25, 0x05D8
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	98 17       	cp	r25, r24
     a6c:	09 f0       	breq	.+2      	; 0xa70 <__stack+0x211>
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <__stack+0x28f>
     {
       LCD_clearScreen();
     a70:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
       LCD_displayStringRowColumn(0,1,"Success");
     a74:	41 e5       	ldi	r20, 0x51	; 81
     a76:	51 e0       	ldi	r21, 0x01	; 1
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
       break;
     a80:	00 00       	nop
     a82:	9e 01       	movw	r18, r28
     a84:	2d 59       	subi	r18, 0x9D	; 157
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	aa e7       	ldi	r26, 0x7A	; 122
     a8e:	b4 e4       	ldi	r27, 0x44	; 68
     a90:	f9 01       	movw	r30, r18
     a92:	80 83       	st	Z, r24
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	a2 83       	std	Z+2, r26	; 0x02
     a98:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a9a:	8e 01       	movw	r16, r28
     a9c:	09 59       	subi	r16, 0x99	; 153
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
     aa0:	ce 01       	movw	r24, r28
     aa2:	8d 59       	subi	r24, 0x9D	; 157
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4a ef       	ldi	r20, 0xFA	; 250
     aac:	54 e4       	ldi	r21, 0x44	; 68
     aae:	fc 01       	movw	r30, r24
     ab0:	60 81       	ld	r22, Z
     ab2:	71 81       	ldd	r23, Z+1	; 0x01
     ab4:	82 81       	ldd	r24, Z+2	; 0x02
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	f8 01       	movw	r30, r16
     ac2:	80 83       	st	Z, r24
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	a2 83       	std	Z+2, r26	; 0x02
     ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     aca:	ce 01       	movw	r24, r28
     acc:	89 59       	subi	r24, 0x99	; 153
     ace:	9f 4f       	sbci	r25, 0xFF	; 255
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e8       	ldi	r20, 0x80	; 128
     ad6:	5f e3       	ldi	r21, 0x3F	; 63
     ad8:	fc 01       	movw	r30, r24
     ada:	60 81       	ld	r22, Z
     adc:	71 81       	ldd	r23, Z+1	; 0x01
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     ae6:	88 23       	and	r24, r24
     ae8:	0c f4       	brge	.+2      	; 0xaec <__stack+0x28d>
     aea:	cc c0       	rjmp	.+408    	; 0xc84 <__stack+0x425>
     aec:	d4 c0       	rjmp	.+424    	; 0xc96 <__stack+0x437>
     }
     else //if response success is not found
     {
         LCD_displayStringRowColumn(0,1,"Try again...");
     aee:	49 e5       	ldi	r20, 0x59	; 89
     af0:	51 e0       	ldi	r21, 0x01	; 1
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
     afa:	9e 01       	movw	r18, r28
     afc:	2b 5a       	subi	r18, 0xAB	; 171
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	aa e7       	ldi	r26, 0x7A	; 122
     b06:	b4 e4       	ldi	r27, 0x44	; 68
     b08:	f9 01       	movw	r30, r18
     b0a:	80 83       	st	Z, r24
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	a2 83       	std	Z+2, r26	; 0x02
     b10:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b12:	8e 01       	movw	r16, r28
     b14:	07 5a       	subi	r16, 0xA7	; 167
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	ce 01       	movw	r24, r28
     b1a:	8b 5a       	subi	r24, 0xAB	; 171
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	4a ef       	ldi	r20, 0xFA	; 250
     b24:	54 e4       	ldi	r21, 0x44	; 68
     b26:	fc 01       	movw	r30, r24
     b28:	60 81       	ld	r22, Z
     b2a:	71 81       	ldd	r23, Z+1	; 0x01
     b2c:	82 81       	ldd	r24, Z+2	; 0x02
     b2e:	93 81       	ldd	r25, Z+3	; 0x03
     b30:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	f8 01       	movw	r30, r16
     b3a:	80 83       	st	Z, r24
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	a2 83       	std	Z+2, r26	; 0x02
     b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b42:	ce 01       	movw	r24, r28
     b44:	87 5a       	subi	r24, 0xA7	; 167
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e8       	ldi	r20, 0x80	; 128
     b4e:	5f e3       	ldi	r21, 0x3F	; 63
     b50:	fc 01       	movw	r30, r24
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
     b56:	82 81       	ldd	r24, Z+2	; 0x02
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     b5e:	88 23       	and	r24, r24
     b60:	4c f4       	brge	.+18     	; 0xb74 <__stack+0x315>
		__ticks = 1;
     b62:	ce 01       	movw	r24, r28
     b64:	83 5a       	subi	r24, 0xA3	; 163
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	21 e0       	ldi	r18, 0x01	; 1
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	fc 01       	movw	r30, r24
     b6e:	31 83       	std	Z+1, r19	; 0x01
     b70:	20 83       	st	Z, r18
     b72:	6d c0       	rjmp	.+218    	; 0xc4e <__stack+0x3ef>
	else if (__tmp > 65535)
     b74:	ce 01       	movw	r24, r28
     b76:	87 5a       	subi	r24, 0xA7	; 167
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	3f ef       	ldi	r19, 0xFF	; 255
     b7e:	4f e7       	ldi	r20, 0x7F	; 127
     b80:	57 e4       	ldi	r21, 0x47	; 71
     b82:	fc 01       	movw	r30, r24
     b84:	60 81       	ld	r22, Z
     b86:	71 81       	ldd	r23, Z+1	; 0x01
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     b90:	18 16       	cp	r1, r24
     b92:	0c f0       	brlt	.+2      	; 0xb96 <__stack+0x337>
     b94:	4a c0       	rjmp	.+148    	; 0xc2a <__stack+0x3cb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b96:	ce 01       	movw	r24, r28
     b98:	8b 5a       	subi	r24, 0xAB	; 171
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e2       	ldi	r20, 0x20	; 32
     ba2:	51 e4       	ldi	r21, 0x41	; 65
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8e 01       	movw	r16, r28
     bb8:	03 5a       	subi	r16, 0xA3	; 163
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	f8 01       	movw	r30, r16
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	24 c0       	rjmp	.+72     	; 0xc18 <__stack+0x3b9>
     bd0:	ce 01       	movw	r24, r28
     bd2:	81 5a       	subi	r24, 0xA1	; 161
     bd4:	9f 4f       	sbci	r25, 0xFF	; 255
     bd6:	28 ec       	ldi	r18, 0xC8	; 200
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	fc 01       	movw	r30, r24
     bdc:	31 83       	std	Z+1, r19	; 0x01
     bde:	20 83       	st	Z, r18
     be0:	ce 01       	movw	r24, r28
     be2:	81 5a       	subi	r24, 0xA1	; 161
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	91 81       	ldd	r25, Z+1	; 0x01
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	f1 f7       	brne	.-4      	; 0xbec <__stack+0x38d>
     bf0:	9e 01       	movw	r18, r28
     bf2:	21 5a       	subi	r18, 0xA1	; 161
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	f9 01       	movw	r30, r18
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfc:	ce 01       	movw	r24, r28
     bfe:	83 5a       	subi	r24, 0xA3	; 163
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	9e 01       	movw	r18, r28
     c04:	23 5a       	subi	r18, 0xA3	; 163
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	f9 01       	movw	r30, r18
     c0a:	20 81       	ld	r18, Z
     c0c:	31 81       	ldd	r19, Z+1	; 0x01
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	31 09       	sbc	r19, r1
     c12:	fc 01       	movw	r30, r24
     c14:	31 83       	std	Z+1, r19	; 0x01
     c16:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	ce 01       	movw	r24, r28
     c1a:	83 5a       	subi	r24, 0xA3	; 163
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	89 2b       	or	r24, r25
     c26:	a1 f6       	brne	.-88     	; 0xbd0 <__stack+0x371>
     c28:	2c c0       	rjmp	.+88     	; 0xc82 <__stack+0x423>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2a:	8e 01       	movw	r16, r28
     c2c:	03 5a       	subi	r16, 0xA3	; 163
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	ce 01       	movw	r24, r28
     c32:	87 5a       	subi	r24, 0xA7	; 167
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	fc 01       	movw	r30, r24
     c38:	60 81       	ld	r22, Z
     c3a:	71 81       	ldd	r23, Z+1	; 0x01
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	f8 01       	movw	r30, r16
     c4a:	91 83       	std	Z+1, r25	; 0x01
     c4c:	80 83       	st	Z, r24
     c4e:	ce 01       	movw	r24, r28
     c50:	8f 59       	subi	r24, 0x9F	; 159
     c52:	9f 4f       	sbci	r25, 0xFF	; 255
     c54:	9e 01       	movw	r18, r28
     c56:	23 5a       	subi	r18, 0xA3	; 163
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	f9 01       	movw	r30, r18
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	fc 01       	movw	r30, r24
     c62:	31 83       	std	Z+1, r19	; 0x01
     c64:	20 83       	st	Z, r18
     c66:	ce 01       	movw	r24, r28
     c68:	8f 59       	subi	r24, 0x9F	; 159
     c6a:	9f 4f       	sbci	r25, 0xFF	; 255
     c6c:	fc 01       	movw	r30, r24
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <__stack+0x413>
     c76:	9e 01       	movw	r18, r28
     c78:	2f 59       	subi	r18, 0x9F	; 159
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	f9 01       	movw	r30, r18
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	80 83       	st	Z, r24
       _delay_ms(1000);
     }
   }
     c82:	f3 cd       	rjmp	.-1050   	; 0x86a <__stack+0xb>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     c84:	ce 01       	movw	r24, r28
     c86:	85 59       	subi	r24, 0x95	; 149
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	fc 01       	movw	r30, r24
     c90:	31 83       	std	Z+1, r19	; 0x01
     c92:	20 83       	st	Z, r18
     c94:	6d c0       	rjmp	.+218    	; 0xd70 <__stack+0x511>
	else if (__tmp > 65535)
     c96:	ce 01       	movw	r24, r28
     c98:	89 59       	subi	r24, 0x99	; 153
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	4f e7       	ldi	r20, 0x7F	; 127
     ca2:	57 e4       	ldi	r21, 0x47	; 71
     ca4:	fc 01       	movw	r30, r24
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     cb2:	18 16       	cp	r1, r24
     cb4:	0c f0       	brlt	.+2      	; 0xcb8 <__stack+0x459>
     cb6:	4a c0       	rjmp	.+148    	; 0xd4c <__stack+0x4ed>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb8:	ce 01       	movw	r24, r28
     cba:	8d 59       	subi	r24, 0x9D	; 157
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e2       	ldi	r20, 0x20	; 32
     cc4:	51 e4       	ldi	r21, 0x41	; 65
     cc6:	fc 01       	movw	r30, r24
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8e 01       	movw	r16, r28
     cda:	05 59       	subi	r16, 0x95	; 149
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	f8 01       	movw	r30, r16
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24
     cf0:	24 c0       	rjmp	.+72     	; 0xd3a <__stack+0x4db>
     cf2:	ce 01       	movw	r24, r28
     cf4:	83 59       	subi	r24, 0x93	; 147
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	28 ec       	ldi	r18, 0xC8	; 200
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	fc 01       	movw	r30, r24
     cfe:	31 83       	std	Z+1, r19	; 0x01
     d00:	20 83       	st	Z, r18
     d02:	ce 01       	movw	r24, r28
     d04:	83 59       	subi	r24, 0x93	; 147
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <__stack+0x4af>
     d12:	9e 01       	movw	r18, r28
     d14:	23 59       	subi	r18, 0x93	; 147
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	f9 01       	movw	r30, r18
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d1e:	ce 01       	movw	r24, r28
     d20:	85 59       	subi	r24, 0x95	; 149
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	9e 01       	movw	r18, r28
     d26:	25 59       	subi	r18, 0x95	; 149
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	f9 01       	movw	r30, r18
     d2c:	20 81       	ld	r18, Z
     d2e:	31 81       	ldd	r19, Z+1	; 0x01
     d30:	21 50       	subi	r18, 0x01	; 1
     d32:	31 09       	sbc	r19, r1
     d34:	fc 01       	movw	r30, r24
     d36:	31 83       	std	Z+1, r19	; 0x01
     d38:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3a:	ce 01       	movw	r24, r28
     d3c:	85 59       	subi	r24, 0x95	; 149
     d3e:	9f 4f       	sbci	r25, 0xFF	; 255
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	89 2b       	or	r24, r25
     d48:	a1 f6       	brne	.-88     	; 0xcf2 <__stack+0x493>
     d4a:	2c c0       	rjmp	.+88     	; 0xda4 <__stack+0x545>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4c:	8e 01       	movw	r16, r28
     d4e:	05 59       	subi	r16, 0x95	; 149
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	ce 01       	movw	r24, r28
     d54:	89 59       	subi	r24, 0x99	; 153
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	fc 01       	movw	r30, r24
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	93 81       	ldd	r25, Z+3	; 0x03
     d62:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	f8 01       	movw	r30, r16
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24
     d70:	ce 01       	movw	r24, r28
     d72:	81 59       	subi	r24, 0x91	; 145
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	9e 01       	movw	r18, r28
     d78:	25 59       	subi	r18, 0x95	; 149
     d7a:	3f 4f       	sbci	r19, 0xFF	; 255
     d7c:	f9 01       	movw	r30, r18
     d7e:	20 81       	ld	r18, Z
     d80:	31 81       	ldd	r19, Z+1	; 0x01
     d82:	fc 01       	movw	r30, r24
     d84:	31 83       	std	Z+1, r19	; 0x01
     d86:	20 83       	st	Z, r18
     d88:	ce 01       	movw	r24, r28
     d8a:	81 59       	subi	r24, 0x91	; 145
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	fc 01       	movw	r30, r24
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <__stack+0x535>
     d98:	9e 01       	movw	r18, r28
     d9a:	21 59       	subi	r18, 0x91	; 145
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
     d9e:	f9 01       	movw	r30, r18
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	80 83       	st	Z, r24
//      	   while((res != OK) && (res != ERROR) && (res != FAIL));
//   	   if(res == OK) break;
//   	   _delay_ms(1000);
//      }

      LCD_clearScreen();
     da4:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
      LCD_displayStringRowColumn(0,1,"WiFi Module Connected");
     da8:	46 e6       	ldi	r20, 0x66	; 102
     daa:	51 e0       	ldi	r21, 0x01	; 1
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
     db4:	9e 01       	movw	r18, r28
     db6:	2f 58       	subi	r18, 0x8F	; 143
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	aa e7       	ldi	r26, 0x7A	; 122
     dc0:	b4 e4       	ldi	r27, 0x44	; 68
     dc2:	f9 01       	movw	r30, r18
     dc4:	80 83       	st	Z, r24
     dc6:	91 83       	std	Z+1, r25	; 0x01
     dc8:	a2 83       	std	Z+2, r26	; 0x02
     dca:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dcc:	8e 01       	movw	r16, r28
     dce:	0b 58       	subi	r16, 0x8B	; 139
     dd0:	1f 4f       	sbci	r17, 0xFF	; 255
     dd2:	ce 01       	movw	r24, r28
     dd4:	8f 58       	subi	r24, 0x8F	; 143
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	4a ef       	ldi	r20, 0xFA	; 250
     dde:	54 e4       	ldi	r21, 0x44	; 68
     de0:	fc 01       	movw	r30, r24
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	f8 01       	movw	r30, r16
     df4:	80 83       	st	Z, r24
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	a2 83       	std	Z+2, r26	; 0x02
     dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dfc:	ce 01       	movw	r24, r28
     dfe:	8b 58       	subi	r24, 0x8B	; 139
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	5f e3       	ldi	r21, 0x3F	; 63
     e0a:	fc 01       	movw	r30, r24
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
     e18:	88 23       	and	r24, r24
     e1a:	4c f4       	brge	.+18     	; 0xe2e <__stack+0x5cf>
		__ticks = 1;
     e1c:	ce 01       	movw	r24, r28
     e1e:	87 58       	subi	r24, 0x87	; 135
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	fc 01       	movw	r30, r24
     e28:	31 83       	std	Z+1, r19	; 0x01
     e2a:	20 83       	st	Z, r18
     e2c:	6d c0       	rjmp	.+218    	; 0xf08 <__stack+0x6a9>
	else if (__tmp > 65535)
     e2e:	ce 01       	movw	r24, r28
     e30:	8b 58       	subi	r24, 0x8B	; 139
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	fc 01       	movw	r30, r24
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <__stack+0x5f1>
     e4e:	4a c0       	rjmp	.+148    	; 0xee4 <__stack+0x685>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	ce 01       	movw	r24, r28
     e52:	8f 58       	subi	r24, 0x8F	; 143
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	fc 01       	movw	r30, r24
     e60:	60 81       	ld	r22, Z
     e62:	71 81       	ldd	r23, Z+1	; 0x01
     e64:	82 81       	ldd	r24, Z+2	; 0x02
     e66:	93 81       	ldd	r25, Z+3	; 0x03
     e68:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	8e 01       	movw	r16, r28
     e72:	07 58       	subi	r16, 0x87	; 135
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	bc 01       	movw	r22, r24
     e78:	cd 01       	movw	r24, r26
     e7a:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	f8 01       	movw	r30, r16
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
     e88:	24 c0       	rjmp	.+72     	; 0xed2 <__stack+0x673>
     e8a:	ce 01       	movw	r24, r28
     e8c:	85 58       	subi	r24, 0x85	; 133
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	28 ec       	ldi	r18, 0xC8	; 200
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	fc 01       	movw	r30, r24
     e96:	31 83       	std	Z+1, r19	; 0x01
     e98:	20 83       	st	Z, r18
     e9a:	ce 01       	movw	r24, r28
     e9c:	85 58       	subi	r24, 0x85	; 133
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <__stack+0x647>
     eaa:	9e 01       	movw	r18, r28
     eac:	25 58       	subi	r18, 0x85	; 133
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	f9 01       	movw	r30, r18
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb6:	ce 01       	movw	r24, r28
     eb8:	87 58       	subi	r24, 0x87	; 135
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	9e 01       	movw	r18, r28
     ebe:	27 58       	subi	r18, 0x87	; 135
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	f9 01       	movw	r30, r18
     ec4:	20 81       	ld	r18, Z
     ec6:	31 81       	ldd	r19, Z+1	; 0x01
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	31 09       	sbc	r19, r1
     ecc:	fc 01       	movw	r30, r24
     ece:	31 83       	std	Z+1, r19	; 0x01
     ed0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed2:	ce 01       	movw	r24, r28
     ed4:	87 58       	subi	r24, 0x87	; 135
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	fc 01       	movw	r30, r24
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	89 2b       	or	r24, r25
     ee0:	a1 f6       	brne	.-88     	; 0xe8a <__stack+0x62b>
     ee2:	2c c0       	rjmp	.+88     	; 0xf3c <__stack+0x6dd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee4:	8e 01       	movw	r16, r28
     ee6:	07 58       	subi	r16, 0x87	; 135
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	ce 01       	movw	r24, r28
     eec:	8b 58       	subi	r24, 0x8B	; 139
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	fc 01       	movw	r30, r24
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	f8 01       	movw	r30, r16
     f04:	91 83       	std	Z+1, r25	; 0x01
     f06:	80 83       	st	Z, r24
     f08:	ce 01       	movw	r24, r28
     f0a:	83 58       	subi	r24, 0x83	; 131
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	9e 01       	movw	r18, r28
     f10:	27 58       	subi	r18, 0x87	; 135
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	31 81       	ldd	r19, Z+1	; 0x01
     f1a:	fc 01       	movw	r30, r24
     f1c:	31 83       	std	Z+1, r19	; 0x01
     f1e:	20 83       	st	Z, r18
     f20:	ce 01       	movw	r24, r28
     f22:	83 58       	subi	r24, 0x83	; 131
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	fc 01       	movw	r30, r24
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <__stack+0x6cd>
     f30:	9e 01       	movw	r18, r28
     f32:	23 58       	subi	r18, 0x83	; 131
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	f9 01       	movw	r30, r18
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
      _delay_ms(1000);

   reset_buff(); //reset first read buffer
     f3c:	0e 94 a7 00 	call	0x14e	; 0x14e <reset_buff>
}
     f40:	c2 58       	subi	r28, 0x82	; 130
     f42:	df 4f       	sbci	r29, 0xFF	; 255
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <extract_data>:


void extract_data()
{
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62

   while(!find_string(rx_buff,"CLOSED"));
     f60:	00 00       	nop
     f62:	6c e7       	ldi	r22, 0x7C	; 124
     f64:	71 e0       	ldi	r23, 0x01	; 1
     f66:	8c ed       	ldi	r24, 0xDC	; 220
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     f6e:	88 23       	and	r24, r24
     f70:	c1 f3       	breq	.-16     	; 0xf62 <extract_data+0xa>

   if(find_string(rx_buff,"LED#1"))
     f72:	63 e8       	ldi	r22, 0x83	; 131
     f74:	71 e0       	ldi	r23, 0x01	; 1
     f76:	8c ed       	ldi	r24, 0xDC	; 220
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     f7e:	88 23       	and	r24, r24
     f80:	51 f0       	breq	.+20     	; 0xf96 <extract_data+0x3e>
   		PORTB |=1<<0;
     f82:	88 e3       	ldi	r24, 0x38	; 56
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	28 e3       	ldi	r18, 0x38	; 56
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	f9 01       	movw	r30, r18
     f8c:	20 81       	ld	r18, Z
     f8e:	21 60       	ori	r18, 0x01	; 1
     f90:	fc 01       	movw	r30, r24
     f92:	20 83       	st	Z, r18
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <extract_data+0x50>
   else
	   PORTB &=~(1<<0);
     f96:	88 e3       	ldi	r24, 0x38	; 56
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	28 e3       	ldi	r18, 0x38	; 56
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	f9 01       	movw	r30, r18
     fa0:	20 81       	ld	r18, Z
     fa2:	2e 7f       	andi	r18, 0xFE	; 254
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

   if(find_string(rx_buff,"FAN#1"))
     fa8:	69 e8       	ldi	r22, 0x89	; 137
     faa:	71 e0       	ldi	r23, 0x01	; 1
     fac:	8c ed       	ldi	r24, 0xDC	; 220
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     fb4:	88 23       	and	r24, r24
     fb6:	51 f0       	breq	.+20     	; 0xfcc <extract_data+0x74>
   		PORTB |=1<<1;
     fb8:	88 e3       	ldi	r24, 0x38	; 56
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	28 e3       	ldi	r18, 0x38	; 56
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	22 60       	ori	r18, 0x02	; 2
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
     fca:	09 c0       	rjmp	.+18     	; 0xfde <extract_data+0x86>
   else
	   PORTB &=~(1<<1);
     fcc:	88 e3       	ldi	r24, 0x38	; 56
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	28 e3       	ldi	r18, 0x38	; 56
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	f9 01       	movw	r30, r18
     fd6:	20 81       	ld	r18, Z
     fd8:	2d 7f       	andi	r18, 0xFD	; 253
     fda:	fc 01       	movw	r30, r24
     fdc:	20 83       	st	Z, r18

   if(find_string(rx_buff,"HEATER#1"))
     fde:	6f e8       	ldi	r22, 0x8F	; 143
     fe0:	71 e0       	ldi	r23, 0x01	; 1
     fe2:	8c ed       	ldi	r24, 0xDC	; 220
     fe4:	93 e0       	ldi	r25, 0x03	; 3
     fe6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <find_string>
     fea:	88 23       	and	r24, r24
     fec:	51 f0       	breq	.+20     	; 0x1002 <extract_data+0xaa>
   		PORTB |=1<<2;
     fee:	88 e3       	ldi	r24, 0x38	; 56
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	28 e3       	ldi	r18, 0x38	; 56
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	24 60       	ori	r18, 0x04	; 4
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <extract_data+0xbc>
   else
	   PORTB &=~(1<<2);
    1002:	88 e3       	ldi	r24, 0x38	; 56
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	28 e3       	ldi	r18, 0x38	; 56
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	2b 7f       	andi	r18, 0xFB	; 251
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18


}
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <send_status>:

//this function checks for webpage request to serve it
void send_status()
{
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	aa 97       	sbiw	r28, 0x2a	; 42
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
	reset_buff();
    102e:	0e 94 a7 00 	call	0x14e	; 0x14e <reset_buff>
	UART_Write_AT(connect_server);
    1032:	8b e3       	ldi	r24, 0x3B	; 59
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	aa ef       	ldi	r26, 0xFA	; 250
    1040:	b4 e4       	ldi	r27, 0x44	; 68
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	ab 83       	std	Y+3, r26	; 0x03
    1048:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	4a ef       	ldi	r20, 0xFA	; 250
    1050:	54 e4       	ldi	r21, 0x44	; 68
    1052:	69 81       	ldd	r22, Y+1	; 0x01
    1054:	7a 81       	ldd	r23, Y+2	; 0x02
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	af 83       	std	Y+7, r26	; 0x07
    1068:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e8       	ldi	r20, 0x80	; 128
    1070:	5f e3       	ldi	r21, 0x3F	; 63
    1072:	6d 81       	ldd	r22, Y+5	; 0x05
    1074:	7e 81       	ldd	r23, Y+6	; 0x06
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	98 85       	ldd	r25, Y+8	; 0x08
    107a:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <send_status+0x72>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9a 87       	std	Y+10, r25	; 0x0a
    1088:	89 87       	std	Y+9, r24	; 0x09
    108a:	3f c0       	rjmp	.+126    	; 0x110a <send_status+0xf0>
	else if (__tmp > 65535)
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	6d 81       	ldd	r22, Y+5	; 0x05
    1096:	7e 81       	ldd	r23, Y+6	; 0x06
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <send_status+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e2       	ldi	r20, 0x20	; 32
    10aa:	51 e4       	ldi	r21, 0x41	; 65
    10ac:	69 81       	ldd	r22, Y+1	; 0x01
    10ae:	7a 81       	ldd	r23, Y+2	; 0x02
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9a 87       	std	Y+10, r25	; 0x0a
    10ca:	89 87       	std	Y+9, r24	; 0x09
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <send_status+0xd2>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 87       	std	Y+12, r25	; 0x0c
    10d4:	8b 87       	std	Y+11, r24	; 0x0b
    10d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <send_status+0xc0>
    10de:	9c 87       	std	Y+12, r25	; 0x0c
    10e0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9a 87       	std	Y+10, r25	; 0x0a
    10ea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	89 2b       	or	r24, r25
    10f2:	69 f7       	brne	.-38     	; 0x10ce <send_status+0xb4>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <send_status+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6d 81       	ldd	r22, Y+5	; 0x05
    10f8:	7e 81       	ldd	r23, Y+6	; 0x06
    10fa:	8f 81       	ldd	r24, Y+7	; 0x07
    10fc:	98 85       	ldd	r25, Y+8	; 0x08
    10fe:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9a 87       	std	Y+10, r25	; 0x0a
    1108:	89 87       	std	Y+9, r24	; 0x09
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	9e 87       	std	Y+14, r25	; 0x0e
    1110:	8d 87       	std	Y+13, r24	; 0x0d
    1112:	8d 85       	ldd	r24, Y+13	; 0x0d
    1114:	9e 85       	ldd	r25, Y+14	; 0x0e
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <send_status+0xfc>
    111a:	9e 87       	std	Y+14, r25	; 0x0e
    111c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	UART_Write_AT("AT+CIPSEND=1,115");
    111e:	88 e9       	ldi	r24, 0x98	; 152
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	aa ef       	ldi	r26, 0xFA	; 250
    112c:	b4 e4       	ldi	r27, 0x44	; 68
    112e:	8f 87       	std	Y+15, r24	; 0x0f
    1130:	98 8b       	std	Y+16, r25	; 0x10
    1132:	a9 8b       	std	Y+17, r26	; 0x11
    1134:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	4a ef       	ldi	r20, 0xFA	; 250
    113c:	54 e4       	ldi	r21, 0x44	; 68
    113e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1140:	78 89       	ldd	r23, Y+16	; 0x10
    1142:	89 89       	ldd	r24, Y+17	; 0x11
    1144:	9a 89       	ldd	r25, Y+18	; 0x12
    1146:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8b 8b       	std	Y+19, r24	; 0x13
    1150:	9c 8b       	std	Y+20, r25	; 0x14
    1152:	ad 8b       	std	Y+21, r26	; 0x15
    1154:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e8       	ldi	r20, 0x80	; 128
    115c:	5f e3       	ldi	r21, 0x3F	; 63
    115e:	6b 89       	ldd	r22, Y+19	; 0x13
    1160:	7c 89       	ldd	r23, Y+20	; 0x14
    1162:	8d 89       	ldd	r24, Y+21	; 0x15
    1164:	9e 89       	ldd	r25, Y+22	; 0x16
    1166:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    116a:	88 23       	and	r24, r24
    116c:	2c f4       	brge	.+10     	; 0x1178 <send_status+0x15e>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	98 8f       	std	Y+24, r25	; 0x18
    1174:	8f 8b       	std	Y+23, r24	; 0x17
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <send_status+0x1dc>
	else if (__tmp > 65535)
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	3f ef       	ldi	r19, 0xFF	; 255
    117c:	4f e7       	ldi	r20, 0x7F	; 127
    117e:	57 e4       	ldi	r21, 0x47	; 71
    1180:	6b 89       	ldd	r22, Y+19	; 0x13
    1182:	7c 89       	ldd	r23, Y+20	; 0x14
    1184:	8d 89       	ldd	r24, Y+21	; 0x15
    1186:	9e 89       	ldd	r25, Y+22	; 0x16
    1188:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    118c:	18 16       	cp	r1, r24
    118e:	4c f5       	brge	.+82     	; 0x11e2 <send_status+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e2       	ldi	r20, 0x20	; 32
    1196:	51 e4       	ldi	r21, 0x41	; 65
    1198:	6f 85       	ldd	r22, Y+15	; 0x0f
    119a:	78 89       	ldd	r23, Y+16	; 0x10
    119c:	89 89       	ldd	r24, Y+17	; 0x11
    119e:	9a 89       	ldd	r25, Y+18	; 0x12
    11a0:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	98 8f       	std	Y+24, r25	; 0x18
    11b6:	8f 8b       	std	Y+23, r24	; 0x17
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <send_status+0x1be>
    11ba:	88 ec       	ldi	r24, 0xC8	; 200
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9a 8f       	std	Y+26, r25	; 0x1a
    11c0:	89 8f       	std	Y+25, r24	; 0x19
    11c2:	89 8d       	ldd	r24, Y+25	; 0x19
    11c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <send_status+0x1ac>
    11ca:	9a 8f       	std	Y+26, r25	; 0x1a
    11cc:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	8f 89       	ldd	r24, Y+23	; 0x17
    11d0:	98 8d       	ldd	r25, Y+24	; 0x18
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	98 8f       	std	Y+24, r25	; 0x18
    11d6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d8:	8f 89       	ldd	r24, Y+23	; 0x17
    11da:	98 8d       	ldd	r25, Y+24	; 0x18
    11dc:	89 2b       	or	r24, r25
    11de:	69 f7       	brne	.-38     	; 0x11ba <send_status+0x1a0>
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <send_status+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	6b 89       	ldd	r22, Y+19	; 0x13
    11e4:	7c 89       	ldd	r23, Y+20	; 0x14
    11e6:	8d 89       	ldd	r24, Y+21	; 0x15
    11e8:	9e 89       	ldd	r25, Y+22	; 0x16
    11ea:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	98 8f       	std	Y+24, r25	; 0x18
    11f4:	8f 8b       	std	Y+23, r24	; 0x17
    11f6:	8f 89       	ldd	r24, Y+23	; 0x17
    11f8:	98 8d       	ldd	r25, Y+24	; 0x18
    11fa:	9c 8f       	std	Y+28, r25	; 0x1c
    11fc:	8b 8f       	std	Y+27, r24	; 0x1b
    11fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <send_status+0x1e8>
    1206:	9c 8f       	std	Y+28, r25	; 0x1c
    1208:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(2000);
	reset_buff();
    120a:	0e 94 a7 00 	call	0x14e	; 0x14e <reset_buff>
	                         // 192.168.43.66/ha1
	UART_sendString("GET http://192.168.43.152/ha1/wb/electro.php?unit=1&led=1&fan=1&heater=1&temp=25&update_server_value=0 HTTP/1.0\r\n\r\n");
    120e:	89 ea       	ldi	r24, 0xA9	; 169
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_sendString>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	aa e7       	ldi	r26, 0x7A	; 122
    121c:	b4 e4       	ldi	r27, 0x44	; 68
    121e:	8d 8f       	std	Y+29, r24	; 0x1d
    1220:	9e 8f       	std	Y+30, r25	; 0x1e
    1222:	af 8f       	std	Y+31, r26	; 0x1f
    1224:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1230:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1232:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1234:	98 a1       	ldd	r25, Y+32	; 0x20
    1236:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	89 a3       	std	Y+33, r24	; 0x21
    1240:	9a a3       	std	Y+34, r25	; 0x22
    1242:	ab a3       	std	Y+35, r26	; 0x23
    1244:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	69 a1       	ldd	r22, Y+33	; 0x21
    1250:	7a a1       	ldd	r23, Y+34	; 0x22
    1252:	8b a1       	ldd	r24, Y+35	; 0x23
    1254:	9c a1       	ldd	r25, Y+36	; 0x24
    1256:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    125a:	88 23       	and	r24, r24
    125c:	2c f4       	brge	.+10     	; 0x1268 <send_status+0x24e>
		__ticks = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9e a3       	std	Y+38, r25	; 0x26
    1264:	8d a3       	std	Y+37, r24	; 0x25
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <send_status+0x2cc>
	else if (__tmp > 65535)
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	69 a1       	ldd	r22, Y+33	; 0x21
    1272:	7a a1       	ldd	r23, Y+34	; 0x22
    1274:	8b a1       	ldd	r24, Y+35	; 0x23
    1276:	9c a1       	ldd	r25, Y+36	; 0x24
    1278:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    127c:	18 16       	cp	r1, r24
    127e:	4c f5       	brge	.+82     	; 0x12d2 <send_status+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	6d 8d       	ldd	r22, Y+29	; 0x1d
    128a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    128c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    128e:	98 a1       	ldd	r25, Y+32	; 0x20
    1290:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e a3       	std	Y+38, r25	; 0x26
    12a6:	8d a3       	std	Y+37, r24	; 0x25
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <send_status+0x2ae>
    12aa:	88 ec       	ldi	r24, 0xC8	; 200
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	98 a7       	std	Y+40, r25	; 0x28
    12b0:	8f a3       	std	Y+39, r24	; 0x27
    12b2:	8f a1       	ldd	r24, Y+39	; 0x27
    12b4:	98 a5       	ldd	r25, Y+40	; 0x28
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <send_status+0x29c>
    12ba:	98 a7       	std	Y+40, r25	; 0x28
    12bc:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12be:	8d a1       	ldd	r24, Y+37	; 0x25
    12c0:	9e a1       	ldd	r25, Y+38	; 0x26
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	9e a3       	std	Y+38, r25	; 0x26
    12c6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	89 2b       	or	r24, r25
    12ce:	69 f7       	brne	.-38     	; 0x12aa <send_status+0x290>
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <send_status+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d2:	69 a1       	ldd	r22, Y+33	; 0x21
    12d4:	7a a1       	ldd	r23, Y+34	; 0x22
    12d6:	8b a1       	ldd	r24, Y+35	; 0x23
    12d8:	9c a1       	ldd	r25, Y+36	; 0x24
    12da:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e a3       	std	Y+38, r25	; 0x26
    12e4:	8d a3       	std	Y+37, r24	; 0x25
    12e6:	8d a1       	ldd	r24, Y+37	; 0x25
    12e8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ea:	9a a7       	std	Y+42, r25	; 0x2a
    12ec:	89 a7       	std	Y+41, r24	; 0x29
    12ee:	89 a5       	ldd	r24, Y+41	; 0x29
    12f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <send_status+0x2d8>
    12f6:	9a a7       	std	Y+42, r25	; 0x2a
    12f8:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1000);
	extract_data();
    12fa:	0e 94 ac 07 	call	0xf58	; 0xf58 <extract_data>

}
    12fe:	aa 96       	adiw	r28, 0x2a	; 42
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <main>:
//}




int main(){
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	aa 97       	sbiw	r28, 0x2a	; 42
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61

	DDRB = 0xff;
    1324:	87 e3       	ldi	r24, 0x37	; 55
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
	PORTB = 0xff;
    132e:	88 e3       	ldi	r24, 0x38	; 56
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	aa e7       	ldi	r26, 0x7A	; 122
    133e:	b4 e4       	ldi	r27, 0x44	; 68
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	ab 83       	std	Y+3, r26	; 0x03
    1346:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a ef       	ldi	r20, 0xFA	; 250
    134e:	54 e4       	ldi	r21, 0x44	; 68
    1350:	69 81       	ldd	r22, Y+1	; 0x01
    1352:	7a 81       	ldd	r23, Y+2	; 0x02
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	af 83       	std	Y+7, r26	; 0x07
    1366:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	6d 81       	ldd	r22, Y+5	; 0x05
    1372:	7e 81       	ldd	r23, Y+6	; 0x06
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    137c:	88 23       	and	r24, r24
    137e:	2c f4       	brge	.+10     	; 0x138a <main+0x7a>
		__ticks = 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9a 87       	std	Y+10, r25	; 0x0a
    1386:	89 87       	std	Y+9, r24	; 0x09
    1388:	3f c0       	rjmp	.+126    	; 0x1408 <main+0xf8>
	else if (__tmp > 65535)
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	6d 81       	ldd	r22, Y+5	; 0x05
    1394:	7e 81       	ldd	r23, Y+6	; 0x06
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	98 85       	ldd	r25, Y+8	; 0x08
    139a:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    139e:	18 16       	cp	r1, r24
    13a0:	4c f5       	brge	.+82     	; 0x13f4 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	69 81       	ldd	r22, Y+1	; 0x01
    13ac:	7a 81       	ldd	r23, Y+2	; 0x02
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9a 87       	std	Y+10, r25	; 0x0a
    13c8:	89 87       	std	Y+9, r24	; 0x09
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <main+0xda>
    13cc:	88 ec       	ldi	r24, 0xC8	; 200
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9c 87       	std	Y+12, r25	; 0x0c
    13d2:	8b 87       	std	Y+11, r24	; 0x0b
    13d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <main+0xc8>
    13dc:	9c 87       	std	Y+12, r25	; 0x0c
    13de:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	9a 87       	std	Y+10, r25	; 0x0a
    13e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ee:	89 2b       	or	r24, r25
    13f0:	69 f7       	brne	.-38     	; 0x13cc <main+0xbc>
    13f2:	14 c0       	rjmp	.+40     	; 0x141c <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f4:	6d 81       	ldd	r22, Y+5	; 0x05
    13f6:	7e 81       	ldd	r23, Y+6	; 0x06
    13f8:	8f 81       	ldd	r24, Y+7	; 0x07
    13fa:	98 85       	ldd	r25, Y+8	; 0x08
    13fc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9a 87       	std	Y+10, r25	; 0x0a
    1406:	89 87       	std	Y+9, r24	; 0x09
    1408:	89 85       	ldd	r24, Y+9	; 0x09
    140a:	9a 85       	ldd	r25, Y+10	; 0x0a
    140c:	9e 87       	std	Y+14, r25	; 0x0e
    140e:	8d 87       	std	Y+13, r24	; 0x0d
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <main+0x104>
    1418:	9e 87       	std	Y+14, r25	; 0x0e
    141a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	PORTB = 0x00;
    141c:	88 e3       	ldi	r24, 0x38	; 56
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	fc 01       	movw	r30, r24
    1422:	10 82       	st	Z, r1

	UART_init();
    1424:	0e 94 c8 10 	call	0x2190	; 0x2190 <UART_init>
	SREG |= 1<<7;
    1428:	8f e5       	ldi	r24, 0x5F	; 95
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	2f e5       	ldi	r18, 0x5F	; 95
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	f9 01       	movw	r30, r18
    1432:	20 81       	ld	r18, Z
    1434:	20 68       	ori	r18, 0x80	; 128
    1436:	fc 01       	movw	r30, r24
    1438:	20 83       	st	Z, r18
	LCD_init();
    143a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <LCD_init>
	LCD_sendCommand(CURSOR_OFF);
    143e:	8c e0       	ldi	r24, 0x0C	; 12
    1440:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_sendCommand>
	LCD_clearScreen();
    1444:	0e 94 be 10 	call	0x217c	; 0x217c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,1,"medo");
    1448:	4d e1       	ldi	r20, 0x1D	; 29
    144a:	52 e0       	ldi	r21, 0x02	; 2
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayStringRowColumn>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	aa ef       	ldi	r26, 0xFA	; 250
    145a:	b3 e4       	ldi	r27, 0x43	; 67
    145c:	8f 87       	std	Y+15, r24	; 0x0f
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	a9 8b       	std	Y+17, r26	; 0x11
    1462:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	4a ef       	ldi	r20, 0xFA	; 250
    146a:	54 e4       	ldi	r21, 0x44	; 68
    146c:	6f 85       	ldd	r22, Y+15	; 0x0f
    146e:	78 89       	ldd	r23, Y+16	; 0x10
    1470:	89 89       	ldd	r24, Y+17	; 0x11
    1472:	9a 89       	ldd	r25, Y+18	; 0x12
    1474:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8b 8b       	std	Y+19, r24	; 0x13
    147e:	9c 8b       	std	Y+20, r25	; 0x14
    1480:	ad 8b       	std	Y+21, r26	; 0x15
    1482:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	5f e3       	ldi	r21, 0x3F	; 63
    148c:	6b 89       	ldd	r22, Y+19	; 0x13
    148e:	7c 89       	ldd	r23, Y+20	; 0x14
    1490:	8d 89       	ldd	r24, Y+21	; 0x15
    1492:	9e 89       	ldd	r25, Y+22	; 0x16
    1494:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1498:	88 23       	and	r24, r24
    149a:	2c f4       	brge	.+10     	; 0x14a6 <main+0x196>
		__ticks = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	98 8f       	std	Y+24, r25	; 0x18
    14a2:	8f 8b       	std	Y+23, r24	; 0x17
    14a4:	3f c0       	rjmp	.+126    	; 0x1524 <main+0x214>
	else if (__tmp > 65535)
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	3f ef       	ldi	r19, 0xFF	; 255
    14aa:	4f e7       	ldi	r20, 0x7F	; 127
    14ac:	57 e4       	ldi	r21, 0x47	; 71
    14ae:	6b 89       	ldd	r22, Y+19	; 0x13
    14b0:	7c 89       	ldd	r23, Y+20	; 0x14
    14b2:	8d 89       	ldd	r24, Y+21	; 0x15
    14b4:	9e 89       	ldd	r25, Y+22	; 0x16
    14b6:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	4c f5       	brge	.+82     	; 0x1510 <main+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e2       	ldi	r20, 0x20	; 32
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    14c8:	78 89       	ldd	r23, Y+16	; 0x10
    14ca:	89 89       	ldd	r24, Y+17	; 0x11
    14cc:	9a 89       	ldd	r25, Y+18	; 0x12
    14ce:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	bc 01       	movw	r22, r24
    14d8:	cd 01       	movw	r24, r26
    14da:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	98 8f       	std	Y+24, r25	; 0x18
    14e4:	8f 8b       	std	Y+23, r24	; 0x17
    14e6:	0f c0       	rjmp	.+30     	; 0x1506 <main+0x1f6>
    14e8:	88 ec       	ldi	r24, 0xC8	; 200
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9a 8f       	std	Y+26, r25	; 0x1a
    14ee:	89 8f       	std	Y+25, r24	; 0x19
    14f0:	89 8d       	ldd	r24, Y+25	; 0x19
    14f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <main+0x1e4>
    14f8:	9a 8f       	std	Y+26, r25	; 0x1a
    14fa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fc:	8f 89       	ldd	r24, Y+23	; 0x17
    14fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	98 8f       	std	Y+24, r25	; 0x18
    1504:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	89 2b       	or	r24, r25
    150c:	69 f7       	brne	.-38     	; 0x14e8 <main+0x1d8>
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <main+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1510:	6b 89       	ldd	r22, Y+19	; 0x13
    1512:	7c 89       	ldd	r23, Y+20	; 0x14
    1514:	8d 89       	ldd	r24, Y+21	; 0x15
    1516:	9e 89       	ldd	r25, Y+22	; 0x16
    1518:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	98 8f       	std	Y+24, r25	; 0x18
    1522:	8f 8b       	std	Y+23, r24	; 0x17
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	9c 8f       	std	Y+28, r25	; 0x1c
    152a:	8b 8f       	std	Y+27, r24	; 0x1b
    152c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <main+0x220>
    1534:	9c 8f       	std	Y+28, r25	; 0x1c
    1536:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(500);
	LCD_goToRowColumn(1,8);
    1538:	68 e0       	ldi	r22, 0x08	; 8
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_goToRowColumn>


	WiFi_Config();
    1540:	0e 94 34 01 	call	0x268	; 0x268 <WiFi_Config>
	UART_Write_AT("AT+CIFSR");
    1544:	82 e2       	ldi	r24, 0x22	; 34
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	0e 94 1b 0b 	call	0x1636	; 0x1636 <UART_Write_AT>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	aa e7       	ldi	r26, 0x7A	; 122
    1552:	b4 e4       	ldi	r27, 0x44	; 68
    1554:	8d 8f       	std	Y+29, r24	; 0x1d
    1556:	9e 8f       	std	Y+30, r25	; 0x1e
    1558:	af 8f       	std	Y+31, r26	; 0x1f
    155a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a ef       	ldi	r20, 0xFA	; 250
    1562:	54 e4       	ldi	r21, 0x44	; 68
    1564:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1566:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1568:	8f 8d       	ldd	r24, Y+31	; 0x1f
    156a:	98 a1       	ldd	r25, Y+32	; 0x20
    156c:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	89 a3       	std	Y+33, r24	; 0x21
    1576:	9a a3       	std	Y+34, r25	; 0x22
    1578:	ab a3       	std	Y+35, r26	; 0x23
    157a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	69 a1       	ldd	r22, Y+33	; 0x21
    1586:	7a a1       	ldd	r23, Y+34	; 0x22
    1588:	8b a1       	ldd	r24, Y+35	; 0x23
    158a:	9c a1       	ldd	r25, Y+36	; 0x24
    158c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1590:	88 23       	and	r24, r24
    1592:	2c f4       	brge	.+10     	; 0x159e <main+0x28e>
		__ticks = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9e a3       	std	Y+38, r25	; 0x26
    159a:	8d a3       	std	Y+37, r24	; 0x25
    159c:	3f c0       	rjmp	.+126    	; 0x161c <main+0x30c>
	else if (__tmp > 65535)
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	69 a1       	ldd	r22, Y+33	; 0x21
    15a8:	7a a1       	ldd	r23, Y+34	; 0x22
    15aa:	8b a1       	ldd	r24, Y+35	; 0x23
    15ac:	9c a1       	ldd	r25, Y+36	; 0x24
    15ae:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	4c f5       	brge	.+82     	; 0x1608 <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15c0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    15c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15c4:	98 a1       	ldd	r25, Y+32	; 0x20
    15c6:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9e a3       	std	Y+38, r25	; 0x26
    15dc:	8d a3       	std	Y+37, r24	; 0x25
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <main+0x2ee>
    15e0:	88 ec       	ldi	r24, 0xC8	; 200
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	98 a7       	std	Y+40, r25	; 0x28
    15e6:	8f a3       	std	Y+39, r24	; 0x27
    15e8:	8f a1       	ldd	r24, Y+39	; 0x27
    15ea:	98 a5       	ldd	r25, Y+40	; 0x28
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <main+0x2dc>
    15f0:	98 a7       	std	Y+40, r25	; 0x28
    15f2:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f4:	8d a1       	ldd	r24, Y+37	; 0x25
    15f6:	9e a1       	ldd	r25, Y+38	; 0x26
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	9e a3       	std	Y+38, r25	; 0x26
    15fc:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1600:	9e a1       	ldd	r25, Y+38	; 0x26
    1602:	89 2b       	or	r24, r25
    1604:	69 f7       	brne	.-38     	; 0x15e0 <main+0x2d0>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <main+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1608:	69 a1       	ldd	r22, Y+33	; 0x21
    160a:	7a a1       	ldd	r23, Y+34	; 0x22
    160c:	8b a1       	ldd	r24, Y+35	; 0x23
    160e:	9c a1       	ldd	r25, Y+36	; 0x24
    1610:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9e a3       	std	Y+38, r25	; 0x26
    161a:	8d a3       	std	Y+37, r24	; 0x25
    161c:	8d a1       	ldd	r24, Y+37	; 0x25
    161e:	9e a1       	ldd	r25, Y+38	; 0x26
    1620:	9a a7       	std	Y+42, r25	; 0x2a
    1622:	89 a7       	std	Y+41, r24	; 0x29
    1624:	89 a5       	ldd	r24, Y+41	; 0x29
    1626:	9a a5       	ldd	r25, Y+42	; 0x2a
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <main+0x318>
    162c:	9a a7       	std	Y+42, r25	; 0x2a
    162e:	89 a7       	std	Y+41, r24	; 0x29


while(1)
{
	_delay_ms(1000);
	send_status();
    1630:	0e 94 0d 08 	call	0x101a	; 0x101a <send_status>
}
    1634:	8b cf       	rjmp	.-234    	; 0x154c <main+0x23c>

00001636 <UART_Write_AT>:
 *      Author: Ahmed
 */

#include "esp.h"

void UART_Write_AT(uint8 *str) {
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	00 d0       	rcall	.+0      	; 0x163c <UART_Write_AT+0x6>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
	UART_sendString(str);
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	0e 94 13 11 	call	0x2226	; 0x2226 <UART_sendString>
	new_line();
    164c:	0e 94 2d 0b 	call	0x165a	; 0x165a <new_line>
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <new_line>:

void new_line() {
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(0x0D);
    1662:	8d e0       	ldi	r24, 0x0D	; 13
    1664:	0e 94 e7 10 	call	0x21ce	; 0x21ce <UART_sendByte>
	UART_sendByte(0x0A);
    1668:	8a e0       	ldi	r24, 0x0A	; 10
    166a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <UART_sendByte>
}
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <find_string>:

uint8 find_string(uint8 *string, uint8 *string_find) {
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	2c 97       	sbiw	r28, 0x0c	; 12
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	9a 87       	std	Y+10, r25	; 0x0a
    168a:	89 87       	std	Y+9, r24	; 0x09
    168c:	7c 87       	std	Y+12, r23	; 0x0c
    168e:	6b 87       	std	Y+11, r22	; 0x0b
	uint16 mathced = 0; //will be incremented in each matching char
    1690:	1a 82       	std	Y+2, r1	; 0x02
    1692:	19 82       	std	Y+1, r1	; 0x01
	uint16 index_string = 0; //index of string source
    1694:	1c 82       	std	Y+4, r1	; 0x04
    1696:	1b 82       	std	Y+3, r1	; 0x03
	uint16 length_of_string = 0; //length of string source
    1698:	1e 82       	std	Y+6, r1	; 0x06
    169a:	1d 82       	std	Y+5, r1	; 0x05
	uint16 length_of_string_find = 0; //length of the text to be found
    169c:	18 86       	std	Y+8, r1	; 0x08
    169e:	1f 82       	std	Y+7, r1	; 0x07

	length_of_string = strlen(string); //get length of string source
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	0e 94 a1 12 	call	0x2542	; 0x2542 <strlen>
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
	length_of_string_find = strlen(string_find); //get length of the text to be found
    16ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b0:	0e 94 a1 12 	call	0x2542	; 0x2542 <strlen>
    16b4:	98 87       	std	Y+8, r25	; 0x08
    16b6:	8f 83       	std	Y+7, r24	; 0x07

	//return 0 if string find size is greater than string source
	if (length_of_string_find > length_of_string) {
    16b8:	2f 81       	ldd	r18, Y+7	; 0x07
    16ba:	38 85       	ldd	r19, Y+8	; 0x08
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	82 17       	cp	r24, r18
    16c2:	93 07       	cpc	r25, r19
    16c4:	10 f4       	brcc	.+4      	; 0x16ca <find_string+0x56>
		return 0;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	32 c0       	rjmp	.+100    	; 0x172e <find_string+0xba>
	}

	for (index_string = 0; index_string < length_of_string; index_string++) //iterate until length of string source
    16ca:	1c 82       	std	Y+4, r1	; 0x04
    16cc:	1b 82       	std	Y+3, r1	; 0x03
    16ce:	27 c0       	rjmp	.+78     	; 0x171e <find_string+0xaa>
			{
		if (string[index_string] == string_find[mathced]) //if current char is mathcing
    16d0:	29 85       	ldd	r18, Y+9	; 0x09
    16d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	82 0f       	add	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	fc 01       	movw	r30, r24
    16de:	40 81       	ld	r20, Z
    16e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    16e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	82 0f       	add	r24, r18
    16ea:	93 1f       	adc	r25, r19
    16ec:	fc 01       	movw	r30, r24
    16ee:	80 81       	ld	r24, Z
    16f0:	48 17       	cp	r20, r24
    16f2:	71 f4       	brne	.+28     	; 0x1710 <find_string+0x9c>
				{
			mathced++; //increment mathced in each matching char
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	89 83       	std	Y+1, r24	; 0x01
			if (length_of_string_find == mathced) //if found equals the size of string find
    16fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1700:	38 85       	ldd	r19, Y+8	; 0x08
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	21 f4       	brne	.+8      	; 0x1714 <find_string+0xa0>
					{
				return 1; //return 1 because string is found
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	0f c0       	rjmp	.+30     	; 0x172e <find_string+0xba>
			}
		} else //otherwise reset mathced
		{
			mathced = 0;
    1710:	1a 82       	std	Y+2, r1	; 0x02
    1712:	19 82       	std	Y+1, r1	; 0x01
	//return 0 if string find size is greater than string source
	if (length_of_string_find > length_of_string) {
		return 0;
	}

	for (index_string = 0; index_string < length_of_string; index_string++) //iterate until length of string source
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	2b 81       	ldd	r18, Y+3	; 0x03
    1720:	3c 81       	ldd	r19, Y+4	; 0x04
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	28 17       	cp	r18, r24
    1728:	39 07       	cpc	r19, r25
    172a:	90 f2       	brcs	.-92     	; 0x16d0 <find_string+0x5c>
		{
			mathced = 0;
		}
	}

	return 0;  //return 0 if string is not found in string source
    172c:	80 e0       	ldi	r24, 0x00	; 0
}
    172e:	2c 96       	adiw	r28, 0x0c	; 12
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <find_get_string>:
//    strncpy(get_text, p1, length);
//    get_text[length -_to_sub] = '\0';
//}

void find_get_string(uint8 *string, uint8 *from, uint8 _from, uint8 *to,
		uint8 _to, uint8 *get_text) {
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2f 97       	sbiw	r28, 0x0f	; 15
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	9f 83       	std	Y+7, r25	; 0x07
    175c:	8e 83       	std	Y+6, r24	; 0x06
    175e:	79 87       	std	Y+9, r23	; 0x09
    1760:	68 87       	std	Y+8, r22	; 0x08
    1762:	4a 87       	std	Y+10, r20	; 0x0a
    1764:	3c 87       	std	Y+12, r19	; 0x0c
    1766:	2b 87       	std	Y+11, r18	; 0x0b
    1768:	0d 87       	std	Y+13, r16	; 0x0d
    176a:	ff 86       	std	Y+15, r15	; 0x0f
    176c:	ee 86       	std	Y+14, r14	; 0x0e
	uint8 *p1; //pointer to string elements
	uint8 *p2; //pointer to string find(from) elements in string
	uint8 length = 0; //gets the length between the two strings
    176e:	19 82       	std	Y+1, r1	; 0x01
	 so the location of the first value is returned.
	 add a number(_from) to point p1 next to any value from the first occurance location
	 value. so p1 is a pointer in memory to the location of first occurance of
	 string 1.
	 */
	p1 = strstr(string, from) + _from;
    1770:	28 85       	ldd	r18, Y+8	; 0x08
    1772:	39 85       	ldd	r19, Y+9	; 0x09
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	b9 01       	movw	r22, r18
    177a:	0e 94 b9 12 	call	0x2572	; 0x2572 <strstr>
    177e:	9c 01       	movw	r18, r24
    1780:	8a 85       	ldd	r24, Y+10	; 0x0a
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	82 0f       	add	r24, r18
    1788:	93 1f       	adc	r25, r19
    178a:	9b 83       	std	Y+3, r25	; 0x03
    178c:	8a 83       	std	Y+2, r24	; 0x02
	 get the location of the first occurance of string 2 in memory
	 when sending the value of p1 the search will start from the value of
	 p1 until it finds the location of the first occurance of the string 2
	 in memory. so the location of the first value + _to is returned.
	 */
	p2 = strstr(p1, to) + _to;
    178e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1790:	3c 85       	ldd	r19, Y+12	; 0x0c
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	b9 01       	movw	r22, r18
    1798:	0e 94 b9 12 	call	0x2572	; 0x2572 <strstr>
    179c:	9c 01       	movw	r18, r24
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
    17a8:	9d 83       	std	Y+5, r25	; 0x05
    17aa:	8c 83       	std	Y+4, r24	; 0x04

	/*
	 get how many characters in between
	 */
	length = p2 - p1;
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	a9 01       	movw	r20, r18
    17b6:	48 1b       	sub	r20, r24
    17b8:	59 0b       	sbc	r21, r25
    17ba:	ca 01       	movw	r24, r20
    17bc:	89 83       	std	Y+1, r24	; 0x01

	/*
	 copy the found characters, from p1 to number of char found in between
	 last char in found char as null
	 */
	strncpy(get_text, p1, length);
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	48 2f       	mov	r20, r24
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	2a 81       	ldd	r18, Y+2	; 0x02
    17c6:	3b 81       	ldd	r19, Y+3	; 0x03
    17c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    17cc:	b9 01       	movw	r22, r18
    17ce:	0e 94 aa 12 	call	0x2554	; 0x2554 <strncpy>
	get_text[length] = '\0';
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2e 85       	ldd	r18, Y+14	; 0x0e
    17da:	3f 85       	ldd	r19, Y+15	; 0x0f
    17dc:	82 0f       	add	r24, r18
    17de:	93 1f       	adc	r25, r19
    17e0:	fc 01       	movw	r30, r24
    17e2:	10 82       	st	Z, r1
}
    17e4:	2f 96       	adiw	r28, 0x0f	; 15
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	08 95       	ret

000017fc <LCD_init>:
 * Author: Mohamed Tarek
 */

#include "lcd.h"

void LCD_init(void) {
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
    1804:	84 e3       	ldi	r24, 0x34	; 52
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2f ef       	ldi	r18, 0xFF	; 255
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18
	LCD_CTRL_PORT_DIR |= (1 << E) | (1 << RS) | (1 << RW); /* Configure the control pins(E,RS,RW) as output pins */
    180e:	81 e3       	ldi	r24, 0x31	; 49
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	21 e3       	ldi	r18, 0x31	; 49
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	f9 01       	movw	r30, r18
    1818:	20 81       	ld	r18, Z
    181a:	20 67       	ori	r18, 0x70	; 112
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18

	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1820:	88 e3       	ldi	r24, 0x38	; 56
    1822:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_sendCommand>

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1826:	8c e0       	ldi	r24, 0x0C	; 12
    1828:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_sendCommand>

	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_sendCommand>
}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command) {
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	e9 97       	sbiw	r28, 0x39	; 57
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT, RS); /* Instruction Mode RS=0 */
    184e:	82 e3       	ldi	r24, 0x32	; 50
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	22 e3       	ldi	r18, 0x32	; 50
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	f9 01       	movw	r30, r18
    1858:	20 81       	ld	r18, Z
    185a:	2f 7e       	andi	r18, 0xEF	; 239
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT, RW); /* write data to LCD so RW=0 */
    1860:	82 e3       	ldi	r24, 0x32	; 50
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	22 e3       	ldi	r18, 0x32	; 50
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	f9 01       	movw	r30, r18
    186a:	20 81       	ld	r18, Z
    186c:	2f 7d       	andi	r18, 0xDF	; 223
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e8       	ldi	r26, 0x80	; 128
    1878:	bf e3       	ldi	r27, 0x3F	; 63
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	ab 83       	std	Y+3, r26	; 0x03
    1880:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a ef       	ldi	r20, 0xFA	; 250
    1888:	54 e4       	ldi	r21, 0x44	; 68
    188a:	69 81       	ldd	r22, Y+1	; 0x01
    188c:	7a 81       	ldd	r23, Y+2	; 0x02
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	8d 83       	std	Y+5, r24	; 0x05
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	af 83       	std	Y+7, r26	; 0x07
    18a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	6d 81       	ldd	r22, Y+5	; 0x05
    18ac:	7e 81       	ldd	r23, Y+6	; 0x06
    18ae:	8f 81       	ldd	r24, Y+7	; 0x07
    18b0:	98 85       	ldd	r25, Y+8	; 0x08
    18b2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    18b6:	88 23       	and	r24, r24
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <LCD_sendCommand+0x8c>
		__ticks = 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9a 87       	std	Y+10, r25	; 0x0a
    18c0:	89 87       	std	Y+9, r24	; 0x09
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	57 e4       	ldi	r21, 0x47	; 71
    18cc:	6d 81       	ldd	r22, Y+5	; 0x05
    18ce:	7e 81       	ldd	r23, Y+6	; 0x06
    18d0:	8f 81       	ldd	r24, Y+7	; 0x07
    18d2:	98 85       	ldd	r25, Y+8	; 0x08
    18d4:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    18d8:	18 16       	cp	r1, r24
    18da:	4c f5       	brge	.+82     	; 0x192e <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	69 81       	ldd	r22, Y+1	; 0x01
    18e6:	7a 81       	ldd	r23, Y+2	; 0x02
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9a 87       	std	Y+10, r25	; 0x0a
    1902:	89 87       	std	Y+9, r24	; 0x09
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <LCD_sendCommand+0xec>
    1906:	88 ec       	ldi	r24, 0xC8	; 200
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9c 87       	std	Y+12, r25	; 0x0c
    190c:	8b 87       	std	Y+11, r24	; 0x0b
    190e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1910:	9c 85       	ldd	r25, Y+12	; 0x0c
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	f1 f7       	brne	.-4      	; 0x1912 <LCD_sendCommand+0xda>
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	9a 87       	std	Y+10, r25	; 0x0a
    1922:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	89 2b       	or	r24, r25
    192a:	69 f7       	brne	.-38     	; 0x1906 <LCD_sendCommand+0xce>
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192e:	6d 81       	ldd	r22, Y+5	; 0x05
    1930:	7e 81       	ldd	r23, Y+6	; 0x06
    1932:	8f 81       	ldd	r24, Y+7	; 0x07
    1934:	98 85       	ldd	r25, Y+8	; 0x08
    1936:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	9a 87       	std	Y+10, r25	; 0x0a
    1940:	89 87       	std	Y+9, r24	; 0x09
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	9e 87       	std	Y+14, r25	; 0x0e
    1948:	8d 87       	std	Y+13, r24	; 0x0d
    194a:	8d 85       	ldd	r24, Y+13	; 0x0d
    194c:	9e 85       	ldd	r25, Y+14	; 0x0e
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <LCD_sendCommand+0x116>
    1952:	9e 87       	std	Y+14, r25	; 0x0e
    1954:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT, E); /* Enable LCD E=1 */
    1956:	82 e3       	ldi	r24, 0x32	; 50
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	22 e3       	ldi	r18, 0x32	; 50
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	f9 01       	movw	r30, r18
    1960:	20 81       	ld	r18, Z
    1962:	20 64       	ori	r18, 0x40	; 64
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e8       	ldi	r26, 0x80	; 128
    196e:	bf e3       	ldi	r27, 0x3F	; 63
    1970:	8f 87       	std	Y+15, r24	; 0x0f
    1972:	98 8b       	std	Y+16, r25	; 0x10
    1974:	a9 8b       	std	Y+17, r26	; 0x11
    1976:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4a ef       	ldi	r20, 0xFA	; 250
    197e:	54 e4       	ldi	r21, 0x44	; 68
    1980:	6f 85       	ldd	r22, Y+15	; 0x0f
    1982:	78 89       	ldd	r23, Y+16	; 0x10
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	9a 89       	ldd	r25, Y+18	; 0x12
    1988:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	8b 8b       	std	Y+19, r24	; 0x13
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	ad 8b       	std	Y+21, r26	; 0x15
    1996:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e8       	ldi	r20, 0x80	; 128
    199e:	5f e3       	ldi	r21, 0x3F	; 63
    19a0:	6b 89       	ldd	r22, Y+19	; 0x13
    19a2:	7c 89       	ldd	r23, Y+20	; 0x14
    19a4:	8d 89       	ldd	r24, Y+21	; 0x15
    19a6:	9e 89       	ldd	r25, Y+22	; 0x16
    19a8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    19ac:	88 23       	and	r24, r24
    19ae:	2c f4       	brge	.+10     	; 0x19ba <LCD_sendCommand+0x182>
		__ticks = 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	98 8f       	std	Y+24, r25	; 0x18
    19b6:	8f 8b       	std	Y+23, r24	; 0x17
    19b8:	3f c0       	rjmp	.+126    	; 0x1a38 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	3f ef       	ldi	r19, 0xFF	; 255
    19be:	4f e7       	ldi	r20, 0x7F	; 127
    19c0:	57 e4       	ldi	r21, 0x47	; 71
    19c2:	6b 89       	ldd	r22, Y+19	; 0x13
    19c4:	7c 89       	ldd	r23, Y+20	; 0x14
    19c6:	8d 89       	ldd	r24, Y+21	; 0x15
    19c8:	9e 89       	ldd	r25, Y+22	; 0x16
    19ca:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	4c f5       	brge	.+82     	; 0x1a24 <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e2       	ldi	r20, 0x20	; 32
    19d8:	51 e4       	ldi	r21, 0x41	; 65
    19da:	6f 85       	ldd	r22, Y+15	; 0x0f
    19dc:	78 89       	ldd	r23, Y+16	; 0x10
    19de:	89 89       	ldd	r24, Y+17	; 0x11
    19e0:	9a 89       	ldd	r25, Y+18	; 0x12
    19e2:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	bc 01       	movw	r22, r24
    19ec:	cd 01       	movw	r24, r26
    19ee:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	98 8f       	std	Y+24, r25	; 0x18
    19f8:	8f 8b       	std	Y+23, r24	; 0x17
    19fa:	0f c0       	rjmp	.+30     	; 0x1a1a <LCD_sendCommand+0x1e2>
    19fc:	88 ec       	ldi	r24, 0xC8	; 200
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9a 8f       	std	Y+26, r25	; 0x1a
    1a02:	89 8f       	std	Y+25, r24	; 0x19
    1a04:	89 8d       	ldd	r24, Y+25	; 0x19
    1a06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_sendCommand+0x1d0>
    1a0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a0e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	98 8f       	std	Y+24, r25	; 0x18
    1a18:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1e:	89 2b       	or	r24, r25
    1a20:	69 f7       	brne	.-38     	; 0x19fc <LCD_sendCommand+0x1c4>
    1a22:	14 c0       	rjmp	.+40     	; 0x1a4c <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	6b 89       	ldd	r22, Y+19	; 0x13
    1a26:	7c 89       	ldd	r23, Y+20	; 0x14
    1a28:	8d 89       	ldd	r24, Y+21	; 0x15
    1a2a:	9e 89       	ldd	r25, Y+22	; 0x16
    1a2c:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	98 8f       	std	Y+24, r25	; 0x18
    1a36:	8f 8b       	std	Y+23, r24	; 0x17
    1a38:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3c:	9c 8f       	std	Y+28, r25	; 0x1c
    1a3e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_sendCommand+0x20c>
    1a48:	9c 8f       	std	Y+28, r25	; 0x1c
    1a4a:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1a4c:	85 e3       	ldi	r24, 0x35	; 53
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	29 ad       	ldd	r18, Y+57	; 0x39
    1a52:	fc 01       	movw	r30, r24
    1a54:	20 83       	st	Z, r18
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a60:	9e 8f       	std	Y+30, r25	; 0x1e
    1a62:	af 8f       	std	Y+31, r26	; 0x1f
    1a64:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a ef       	ldi	r20, 0xFA	; 250
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a70:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a74:	98 a1       	ldd	r25, Y+32	; 0x20
    1a76:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	89 a3       	std	Y+33, r24	; 0x21
    1a80:	9a a3       	std	Y+34, r25	; 0x22
    1a82:	ab a3       	std	Y+35, r26	; 0x23
    1a84:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	69 a1       	ldd	r22, Y+33	; 0x21
    1a90:	7a a1       	ldd	r23, Y+34	; 0x22
    1a92:	8b a1       	ldd	r24, Y+35	; 0x23
    1a94:	9c a1       	ldd	r25, Y+36	; 0x24
    1a96:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <LCD_sendCommand+0x270>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9e a3       	std	Y+38, r25	; 0x26
    1aa4:	8d a3       	std	Y+37, r24	; 0x25
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	69 a1       	ldd	r22, Y+33	; 0x21
    1ab2:	7a a1       	ldd	r23, Y+34	; 0x22
    1ab4:	8b a1       	ldd	r24, Y+35	; 0x23
    1ab6:	9c a1       	ldd	r25, Y+36	; 0x24
    1ab8:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1aca:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1acc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ace:	98 a1       	ldd	r25, Y+32	; 0x20
    1ad0:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9e a3       	std	Y+38, r25	; 0x26
    1ae6:	8d a3       	std	Y+37, r24	; 0x25
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <LCD_sendCommand+0x2d0>
    1aea:	88 ec       	ldi	r24, 0xC8	; 200
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	98 a7       	std	Y+40, r25	; 0x28
    1af0:	8f a3       	std	Y+39, r24	; 0x27
    1af2:	8f a1       	ldd	r24, Y+39	; 0x27
    1af4:	98 a5       	ldd	r25, Y+40	; 0x28
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <LCD_sendCommand+0x2be>
    1afa:	98 a7       	std	Y+40, r25	; 0x28
    1afc:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8d a1       	ldd	r24, Y+37	; 0x25
    1b00:	9e a1       	ldd	r25, Y+38	; 0x26
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9e a3       	std	Y+38, r25	; 0x26
    1b06:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8d a1       	ldd	r24, Y+37	; 0x25
    1b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b0c:	89 2b       	or	r24, r25
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <LCD_sendCommand+0x2b2>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	69 a1       	ldd	r22, Y+33	; 0x21
    1b14:	7a a1       	ldd	r23, Y+34	; 0x22
    1b16:	8b a1       	ldd	r24, Y+35	; 0x23
    1b18:	9c a1       	ldd	r25, Y+36	; 0x24
    1b1a:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e a3       	std	Y+38, r25	; 0x26
    1b24:	8d a3       	std	Y+37, r24	; 0x25
    1b26:	8d a1       	ldd	r24, Y+37	; 0x25
    1b28:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2a:	9a a7       	std	Y+42, r25	; 0x2a
    1b2c:	89 a7       	std	Y+41, r24	; 0x29
    1b2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_sendCommand+0x2fa>
    1b36:	9a a7       	std	Y+42, r25	; 0x2a
    1b38:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT, E); /* disable LCD E=0 */
    1b3a:	82 e3       	ldi	r24, 0x32	; 50
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	22 e3       	ldi	r18, 0x32	; 50
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	f9 01       	movw	r30, r18
    1b44:	20 81       	ld	r18, Z
    1b46:	2f 7b       	andi	r18, 0xBF	; 191
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 83       	st	Z, r18
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e8       	ldi	r26, 0x80	; 128
    1b52:	bf e3       	ldi	r27, 0x3F	; 63
    1b54:	8b a7       	std	Y+43, r24	; 0x2b
    1b56:	9c a7       	std	Y+44, r25	; 0x2c
    1b58:	ad a7       	std	Y+45, r26	; 0x2d
    1b5a:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a ef       	ldi	r20, 0xFA	; 250
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	6b a5       	ldd	r22, Y+43	; 0x2b
    1b66:	7c a5       	ldd	r23, Y+44	; 0x2c
    1b68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b6c:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8f a7       	std	Y+47, r24	; 0x2f
    1b76:	98 ab       	std	Y+48, r25	; 0x30
    1b78:	a9 ab       	std	Y+49, r26	; 0x31
    1b7a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	6f a5       	ldd	r22, Y+47	; 0x2f
    1b86:	78 a9       	ldd	r23, Y+48	; 0x30
    1b88:	89 a9       	ldd	r24, Y+49	; 0x31
    1b8a:	9a a9       	ldd	r25, Y+50	; 0x32
    1b8c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_sendCommand+0x366>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9c ab       	std	Y+52, r25	; 0x34
    1b9a:	8b ab       	std	Y+51, r24	; 0x33
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	6f a5       	ldd	r22, Y+47	; 0x2f
    1ba8:	78 a9       	ldd	r23, Y+48	; 0x30
    1baa:	89 a9       	ldd	r24, Y+49	; 0x31
    1bac:	9a a9       	ldd	r25, Y+50	; 0x32
    1bae:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	6b a5       	ldd	r22, Y+43	; 0x2b
    1bc0:	7c a5       	ldd	r23, Y+44	; 0x2c
    1bc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bc6:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9c ab       	std	Y+52, r25	; 0x34
    1bdc:	8b ab       	std	Y+51, r24	; 0x33
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_sendCommand+0x3c6>
    1be0:	88 ec       	ldi	r24, 0xC8	; 200
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9e ab       	std	Y+54, r25	; 0x36
    1be6:	8d ab       	std	Y+53, r24	; 0x35
    1be8:	8d a9       	ldd	r24, Y+53	; 0x35
    1bea:	9e a9       	ldd	r25, Y+54	; 0x36
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_sendCommand+0x3b4>
    1bf0:	9e ab       	std	Y+54, r25	; 0x36
    1bf2:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9c ab       	std	Y+52, r25	; 0x34
    1bfc:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1c00:	9c a9       	ldd	r25, Y+52	; 0x34
    1c02:	89 2b       	or	r24, r25
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_sendCommand+0x3a8>
    1c06:	14 c0       	rjmp	.+40     	; 0x1c30 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6f a5       	ldd	r22, Y+47	; 0x2f
    1c0a:	78 a9       	ldd	r23, Y+48	; 0x30
    1c0c:	89 a9       	ldd	r24, Y+49	; 0x31
    1c0e:	9a a9       	ldd	r25, Y+50	; 0x32
    1c10:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9c ab       	std	Y+52, r25	; 0x34
    1c1a:	8b ab       	std	Y+51, r24	; 0x33
    1c1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c20:	98 af       	std	Y+56, r25	; 0x38
    1c22:	8f ab       	std	Y+55, r24	; 0x37
    1c24:	8f a9       	ldd	r24, Y+55	; 0x37
    1c26:	98 ad       	ldd	r25, Y+56	; 0x38
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_sendCommand+0x3f0>
    1c2c:	98 af       	std	Y+56, r25	; 0x38
    1c2e:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1c30:	e9 96       	adiw	r28, 0x39	; 57
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data) {
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	e9 97       	sbiw	r28, 0x39	; 57
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT, RS); /* Data Mode RS=1 */
    1c58:	82 e3       	ldi	r24, 0x32	; 50
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	22 e3       	ldi	r18, 0x32	; 50
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	f9 01       	movw	r30, r18
    1c62:	20 81       	ld	r18, Z
    1c64:	20 61       	ori	r18, 0x10	; 16
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT, RW); /* write data to LCD so RW=0 */
    1c6a:	82 e3       	ldi	r24, 0x32	; 50
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	22 e3       	ldi	r18, 0x32	; 50
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	f9 01       	movw	r30, r18
    1c74:	20 81       	ld	r18, Z
    1c76:	2f 7d       	andi	r18, 0xDF	; 223
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 83       	st	Z, r18
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	ab 83       	std	Y+3, r26	; 0x03
    1c8a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a ef       	ldi	r20, 0xFA	; 250
    1c92:	54 e4       	ldi	r21, 0x44	; 68
    1c94:	69 81       	ldd	r22, Y+1	; 0x01
    1c96:	7a 81       	ldd	r23, Y+2	; 0x02
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	af 83       	std	Y+7, r26	; 0x07
    1caa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e8       	ldi	r20, 0x80	; 128
    1cb2:	5f e3       	ldi	r21, 0x3F	; 63
    1cb4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cb6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cba:	98 85       	ldd	r25, Y+8	; 0x08
    1cbc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_displayCharacter+0x8c>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9a 87       	std	Y+10, r25	; 0x0a
    1cca:	89 87       	std	Y+9, r24	; 0x09
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd8:	7e 81       	ldd	r23, Y+6	; 0x06
    1cda:	8f 81       	ldd	r24, Y+7	; 0x07
    1cdc:	98 85       	ldd	r25, Y+8	; 0x08
    1cde:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	69 81       	ldd	r22, Y+1	; 0x01
    1cf0:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9a 87       	std	Y+10, r25	; 0x0a
    1d0c:	89 87       	std	Y+9, r24	; 0x09
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_displayCharacter+0xec>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	9c 87       	std	Y+12, r25	; 0x0c
    1d16:	8b 87       	std	Y+11, r24	; 0x0b
    1d18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_displayCharacter+0xda>
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9a 87       	std	Y+10, r25	; 0x0a
    1d2c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	89 2b       	or	r24, r25
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_displayCharacter+0xce>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6d 81       	ldd	r22, Y+5	; 0x05
    1d3a:	7e 81       	ldd	r23, Y+6	; 0x06
    1d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3e:	98 85       	ldd	r25, Y+8	; 0x08
    1d40:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9a 87       	std	Y+10, r25	; 0x0a
    1d4a:	89 87       	std	Y+9, r24	; 0x09
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	9e 87       	std	Y+14, r25	; 0x0e
    1d52:	8d 87       	std	Y+13, r24	; 0x0d
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_displayCharacter+0x116>
    1d5c:	9e 87       	std	Y+14, r25	; 0x0e
    1d5e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT, E); /* Enable LCD E=1 */
    1d60:	82 e3       	ldi	r24, 0x32	; 50
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	22 e3       	ldi	r18, 0x32	; 50
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	f9 01       	movw	r30, r18
    1d6a:	20 81       	ld	r18, Z
    1d6c:	20 64       	ori	r18, 0x40	; 64
    1d6e:	fc 01       	movw	r30, r24
    1d70:	20 83       	st	Z, r18
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e8       	ldi	r26, 0x80	; 128
    1d78:	bf e3       	ldi	r27, 0x3F	; 63
    1d7a:	8f 87       	std	Y+15, r24	; 0x0f
    1d7c:	98 8b       	std	Y+16, r25	; 0x10
    1d7e:	a9 8b       	std	Y+17, r26	; 0x11
    1d80:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d8c:	78 89       	ldd	r23, Y+16	; 0x10
    1d8e:	89 89       	ldd	r24, Y+17	; 0x11
    1d90:	9a 89       	ldd	r25, Y+18	; 0x12
    1d92:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8b 8b       	std	Y+19, r24	; 0x13
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	ad 8b       	std	Y+21, r26	; 0x15
    1da0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	6b 89       	ldd	r22, Y+19	; 0x13
    1dac:	7c 89       	ldd	r23, Y+20	; 0x14
    1dae:	8d 89       	ldd	r24, Y+21	; 0x15
    1db0:	9e 89       	ldd	r25, Y+22	; 0x16
    1db2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <LCD_displayCharacter+0x182>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	98 8f       	std	Y+24, r25	; 0x18
    1dc0:	8f 8b       	std	Y+23, r24	; 0x17
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	6b 89       	ldd	r22, Y+19	; 0x13
    1dce:	7c 89       	ldd	r23, Y+20	; 0x14
    1dd0:	8d 89       	ldd	r24, Y+21	; 0x15
    1dd2:	9e 89       	ldd	r25, Y+22	; 0x16
    1dd4:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1de6:	78 89       	ldd	r23, Y+16	; 0x10
    1de8:	89 89       	ldd	r24, Y+17	; 0x11
    1dea:	9a 89       	ldd	r25, Y+18	; 0x12
    1dec:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	98 8f       	std	Y+24, r25	; 0x18
    1e02:	8f 8b       	std	Y+23, r24	; 0x17
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_displayCharacter+0x1e2>
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e0c:	89 8f       	std	Y+25, r24	; 0x19
    1e0e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_displayCharacter+0x1d0>
    1e16:	9a 8f       	std	Y+26, r25	; 0x1a
    1e18:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	98 8f       	std	Y+24, r25	; 0x18
    1e22:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	89 2b       	or	r24, r25
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <LCD_displayCharacter+0x1c4>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6b 89       	ldd	r22, Y+19	; 0x13
    1e30:	7c 89       	ldd	r23, Y+20	; 0x14
    1e32:	8d 89       	ldd	r24, Y+21	; 0x15
    1e34:	9e 89       	ldd	r25, Y+22	; 0x16
    1e36:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	98 8f       	std	Y+24, r25	; 0x18
    1e40:	8f 8b       	std	Y+23, r24	; 0x17
    1e42:	8f 89       	ldd	r24, Y+23	; 0x17
    1e44:	98 8d       	ldd	r25, Y+24	; 0x18
    1e46:	9c 8f       	std	Y+28, r25	; 0x1c
    1e48:	8b 8f       	std	Y+27, r24	; 0x1b
    1e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_displayCharacter+0x20c>
    1e52:	9c 8f       	std	Y+28, r25	; 0x1c
    1e54:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1e56:	85 e3       	ldi	r24, 0x35	; 53
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	29 ad       	ldd	r18, Y+57	; 0x39
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	20 83       	st	Z, r18
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e8       	ldi	r26, 0x80	; 128
    1e66:	bf e3       	ldi	r27, 0x3F	; 63
    1e68:	8d 8f       	std	Y+29, r24	; 0x1d
    1e6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6c:	af 8f       	std	Y+31, r26	; 0x1f
    1e6e:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e7a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e80:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	89 a3       	std	Y+33, r24	; 0x21
    1e8a:	9a a3       	std	Y+34, r25	; 0x22
    1e8c:	ab a3       	std	Y+35, r26	; 0x23
    1e8e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	69 a1       	ldd	r22, Y+33	; 0x21
    1e9a:	7a a1       	ldd	r23, Y+34	; 0x22
    1e9c:	8b a1       	ldd	r24, Y+35	; 0x23
    1e9e:	9c a1       	ldd	r25, Y+36	; 0x24
    1ea0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <LCD_displayCharacter+0x270>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9e a3       	std	Y+38, r25	; 0x26
    1eae:	8d a3       	std	Y+37, r24	; 0x25
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	69 a1       	ldd	r22, Y+33	; 0x21
    1ebc:	7a a1       	ldd	r23, Y+34	; 0x22
    1ebe:	8b a1       	ldd	r24, Y+35	; 0x23
    1ec0:	9c a1       	ldd	r25, Y+36	; 0x24
    1ec2:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ed4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ed8:	98 a1       	ldd	r25, Y+32	; 0x20
    1eda:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e a3       	std	Y+38, r25	; 0x26
    1ef0:	8d a3       	std	Y+37, r24	; 0x25
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <LCD_displayCharacter+0x2d0>
    1ef4:	88 ec       	ldi	r24, 0xC8	; 200
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	98 a7       	std	Y+40, r25	; 0x28
    1efa:	8f a3       	std	Y+39, r24	; 0x27
    1efc:	8f a1       	ldd	r24, Y+39	; 0x27
    1efe:	98 a5       	ldd	r25, Y+40	; 0x28
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_displayCharacter+0x2be>
    1f04:	98 a7       	std	Y+40, r25	; 0x28
    1f06:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8d a1       	ldd	r24, Y+37	; 0x25
    1f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9e a3       	std	Y+38, r25	; 0x26
    1f10:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8d a1       	ldd	r24, Y+37	; 0x25
    1f14:	9e a1       	ldd	r25, Y+38	; 0x26
    1f16:	89 2b       	or	r24, r25
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <LCD_displayCharacter+0x2b2>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	69 a1       	ldd	r22, Y+33	; 0x21
    1f1e:	7a a1       	ldd	r23, Y+34	; 0x22
    1f20:	8b a1       	ldd	r24, Y+35	; 0x23
    1f22:	9c a1       	ldd	r25, Y+36	; 0x24
    1f24:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e a3       	std	Y+38, r25	; 0x26
    1f2e:	8d a3       	std	Y+37, r24	; 0x25
    1f30:	8d a1       	ldd	r24, Y+37	; 0x25
    1f32:	9e a1       	ldd	r25, Y+38	; 0x26
    1f34:	9a a7       	std	Y+42, r25	; 0x2a
    1f36:	89 a7       	std	Y+41, r24	; 0x29
    1f38:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_displayCharacter+0x2fa>
    1f40:	9a a7       	std	Y+42, r25	; 0x2a
    1f42:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT, E); /* disable LCD E=0 */
    1f44:	82 e3       	ldi	r24, 0x32	; 50
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	22 e3       	ldi	r18, 0x32	; 50
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	20 81       	ld	r18, Z
    1f50:	2f 7b       	andi	r18, 0xBF	; 191
    1f52:	fc 01       	movw	r30, r24
    1f54:	20 83       	st	Z, r18
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a0 e8       	ldi	r26, 0x80	; 128
    1f5c:	bf e3       	ldi	r27, 0x3F	; 63
    1f5e:	8b a7       	std	Y+43, r24	; 0x2b
    1f60:	9c a7       	std	Y+44, r25	; 0x2c
    1f62:	ad a7       	std	Y+45, r26	; 0x2d
    1f64:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1f70:	7c a5       	ldd	r23, Y+44	; 0x2c
    1f72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f76:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	98 ab       	std	Y+48, r25	; 0x30
    1f82:	a9 ab       	std	Y+49, r26	; 0x31
    1f84:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1f90:	78 a9       	ldd	r23, Y+48	; 0x30
    1f92:	89 a9       	ldd	r24, Y+49	; 0x31
    1f94:	9a a9       	ldd	r25, Y+50	; 0x32
    1f96:	0e 94 7f 11 	call	0x22fe	; 0x22fe <__cmpsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <LCD_displayCharacter+0x366>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c ab       	std	Y+52, r25	; 0x34
    1fa4:	8b ab       	std	Y+51, r24	; 0x33
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	6f a5       	ldd	r22, Y+47	; 0x2f
    1fb2:	78 a9       	ldd	r23, Y+48	; 0x30
    1fb4:	89 a9       	ldd	r24, Y+49	; 0x31
    1fb6:	9a a9       	ldd	r25, Y+50	; 0x32
    1fb8:	0e 94 00 12 	call	0x2400	; 0x2400 <__gesf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	4c f5       	brge	.+82     	; 0x2012 <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	6b a5       	ldd	r22, Y+43	; 0x2b
    1fca:	7c a5       	ldd	r23, Y+44	; 0x2c
    1fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd0:	0e 94 05 12 	call	0x240a	; 0x240a <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9c ab       	std	Y+52, r25	; 0x34
    1fe6:	8b ab       	std	Y+51, r24	; 0x33
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <LCD_displayCharacter+0x3c6>
    1fea:	88 ec       	ldi	r24, 0xC8	; 200
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9e ab       	std	Y+54, r25	; 0x36
    1ff0:	8d ab       	std	Y+53, r24	; 0x35
    1ff2:	8d a9       	ldd	r24, Y+53	; 0x35
    1ff4:	9e a9       	ldd	r25, Y+54	; 0x36
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_displayCharacter+0x3b4>
    1ffa:	9e ab       	std	Y+54, r25	; 0x36
    1ffc:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    2000:	9c a9       	ldd	r25, Y+52	; 0x34
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	9c ab       	std	Y+52, r25	; 0x34
    2006:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	89 2b       	or	r24, r25
    200e:	69 f7       	brne	.-38     	; 0x1fea <LCD_displayCharacter+0x3a8>
    2010:	14 c0       	rjmp	.+40     	; 0x203a <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	6f a5       	ldd	r22, Y+47	; 0x2f
    2014:	78 a9       	ldd	r23, Y+48	; 0x30
    2016:	89 a9       	ldd	r24, Y+49	; 0x31
    2018:	9a a9       	ldd	r25, Y+50	; 0x32
    201a:	0e 94 84 11 	call	0x2308	; 0x2308 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9c ab       	std	Y+52, r25	; 0x34
    2024:	8b ab       	std	Y+51, r24	; 0x33
    2026:	8b a9       	ldd	r24, Y+51	; 0x33
    2028:	9c a9       	ldd	r25, Y+52	; 0x34
    202a:	98 af       	std	Y+56, r25	; 0x38
    202c:	8f ab       	std	Y+55, r24	; 0x37
    202e:	8f a9       	ldd	r24, Y+55	; 0x37
    2030:	98 ad       	ldd	r25, Y+56	; 0x38
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_displayCharacter+0x3f0>
    2036:	98 af       	std	Y+56, r25	; 0x38
    2038:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    203a:	e9 96       	adiw	r28, 0x39	; 57
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <LCD_displayString>:

void LCD_displayString(const char *Str) {
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	00 d0       	rcall	.+0      	; 0x2052 <LCD_displayString+0x6>
    2052:	1f 92       	push	r1
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9b 83       	std	Y+3, r25	; 0x03
    205a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    205c:	19 82       	std	Y+1, r1	; 0x01
	while (Str[i] != '\0') {
    205e:	0e c0       	rjmp	.+28     	; 0x207c <LCD_displayString+0x30>
		LCD_displayCharacter(Str[i]);
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	2a 81       	ldd	r18, Y+2	; 0x02
    2068:	3b 81       	ldd	r19, Y+3	; 0x03
    206a:	82 0f       	add	r24, r18
    206c:	93 1f       	adc	r25, r19
    206e:	fc 01       	movw	r30, r24
    2070:	80 81       	ld	r24, Z
    2072:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_displayCharacter>
		i++;
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	8f 5f       	subi	r24, 0xFF	; 255
    207a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}

void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	2a 81       	ldd	r18, Y+2	; 0x02
    2084:	3b 81       	ldd	r19, Y+3	; 0x03
    2086:	82 0f       	add	r24, r18
    2088:	93 1f       	adc	r25, r19
    208a:	fc 01       	movw	r30, r24
    208c:	80 81       	ld	r24, Z
    208e:	88 23       	and	r24, r24
    2090:	39 f7       	brne	.-50     	; 0x2060 <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }		
	 *********************************************************/
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	08 95       	ret

0000209e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col) {
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <LCD_goToRowColumn+0x6>
    20a4:	1f 92       	push	r1
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch (row) {
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	91 05       	cpc	r25, r1
    20b8:	79 f0       	breq	.+30     	; 0x20d8 <LCD_goToRowColumn+0x3a>
    20ba:	82 30       	cpi	r24, 0x02	; 2
    20bc:	91 05       	cpc	r25, r1
    20be:	1c f4       	brge	.+6      	; 0x20c6 <LCD_goToRowColumn+0x28>
    20c0:	89 2b       	or	r24, r25
    20c2:	39 f0       	breq	.+14     	; 0x20d2 <LCD_goToRowColumn+0x34>
    20c4:	15 c0       	rjmp	.+42     	; 0x20f0 <LCD_goToRowColumn+0x52>
    20c6:	82 30       	cpi	r24, 0x02	; 2
    20c8:	91 05       	cpc	r25, r1
    20ca:	51 f0       	breq	.+20     	; 0x20e0 <LCD_goToRowColumn+0x42>
    20cc:	03 97       	sbiw	r24, 0x03	; 3
    20ce:	61 f0       	breq	.+24     	; 0x20e8 <LCD_goToRowColumn+0x4a>
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <LCD_goToRowColumn+0x52>
	case 0:
		Address = col;
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	89 83       	std	Y+1, r24	; 0x01
		break;
    20d6:	0c c0       	rjmp	.+24     	; 0x20f0 <LCD_goToRowColumn+0x52>
	case 1:
		Address = col + 0x40;
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	80 5c       	subi	r24, 0xC0	; 192
    20dc:	89 83       	std	Y+1, r24	; 0x01
		break;
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <LCD_goToRowColumn+0x52>
	case 2:
		Address = col + 0x10;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	80 5f       	subi	r24, 0xF0	; 240
    20e4:	89 83       	std	Y+1, r24	; 0x01
		break;
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <LCD_goToRowColumn+0x52>
	case 3:
		Address = col + 0x50;
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	80 5b       	subi	r24, 0xB0	; 176
    20ec:	89 83       	std	Y+1, r24	; 0x01
		break;
    20ee:	00 00       	nop
	}
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_sendCommand>
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	08 95       	ret

00002104 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	00 d0       	rcall	.+0      	; 0x210a <LCD_displayStringRowColumn+0x6>
    210a:	00 d0       	rcall	.+0      	; 0x210c <LCD_displayStringRowColumn+0x8>
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	6a 83       	std	Y+2, r22	; 0x02
    2114:	5c 83       	std	Y+4, r21	; 0x04
    2116:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col); /* go to to the required LCD position */
    2118:	6a 81       	ldd	r22, Y+2	; 0x02
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	0e 94 4f 10 	call	0x209e	; 0x209e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	0e 94 26 10 	call	0x204c	; 0x204c <LCD_displayString>
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	08 95       	ret

00002136 <LCD_intgerToString>:

void LCD_intgerToString(int data) {
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	62 97       	sbiw	r28, 0x12	; 18
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	9a 8b       	std	Y+18, r25	; 0x12
    214c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* 10 for decimal */
    214e:	89 89       	ldd	r24, Y+17	; 0x11
    2150:	9a 89       	ldd	r25, Y+18	; 0x12
    2152:	4a e0       	ldi	r20, 0x0A	; 10
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	9e 01       	movw	r18, r28
    2158:	2f 5f       	subi	r18, 0xFF	; 255
    215a:	3f 4f       	sbci	r19, 0xFF	; 255
    215c:	b9 01       	movw	r22, r18
    215e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <itoa>
	LCD_displayString(buff);
    2162:	ce 01       	movw	r24, r28
    2164:	01 96       	adiw	r24, 0x01	; 1
    2166:	0e 94 26 10 	call	0x204c	; 0x204c <LCD_displayString>
}
    216a:	62 96       	adiw	r28, 0x12	; 18
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <LCD_clearScreen>:

void LCD_clearScreen(void) {
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_sendCommand>
}
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <UART_init>:
 * Author: Mohamed Tarek
 */

#include "uart.h"

void UART_init(void) {
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2198:	8b e2       	ldi	r24, 0x2B	; 43
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	22 e0       	ldi	r18, 0x02	; 2
    219e:	fc 01       	movw	r30, r24
    21a0:	20 83       	st	Z, r18
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    21a2:	8a e2       	ldi	r24, 0x2A	; 42
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	28 e9       	ldi	r18, 0x98	; 152
    21a8:	fc 01       	movw	r30, r24
    21aa:	20 83       	st	Z, r18
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    21ac:	80 e4       	ldi	r24, 0x40	; 64
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	26 e8       	ldi	r18, 0x86	; 134
    21b2:	fc 01       	movw	r30, r24
    21b4:	20 83       	st	Z, r18

	/* baud rate=9600 & Fosc=1MHz -->  UBBR=( Fosc / (8 * baud rate) ) - 1 = 12 */

	UBRRH = 0;
    21b6:	80 e4       	ldi	r24, 0x40	; 64
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	fc 01       	movw	r30, r24
    21bc:	10 82       	st	Z, r1
	UBRRL = 8;
    21be:	89 e2       	ldi	r24, 0x29	; 41
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	28 e0       	ldi	r18, 0x08	; 8
    21c4:	fc 01       	movw	r30, r24
    21c6:	20 83       	st	Z, r18
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <UART_sendByte>:

void UART_sendByte(const uint8 data) {
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	1f 92       	push	r1
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    21da:	00 00       	nop
    21dc:	8b e2       	ldi	r24, 0x2B	; 43
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	fc 01       	movw	r30, r24
    21e2:	80 81       	ld	r24, Z
    21e4:	88 2f       	mov	r24, r24
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	80 72       	andi	r24, 0x20	; 32
    21ea:	99 27       	eor	r25, r25
    21ec:	89 2b       	or	r24, r25
    21ee:	b1 f3       	breq	.-20     	; 0x21dc <UART_sendByte+0xe>
	}
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */
	UDR = data;
    21f0:	8c e2       	ldi	r24, 0x2C	; 44
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	29 81       	ldd	r18, Y+1	; 0x01
    21f6:	fc 01       	movw	r30, r24
    21f8:	20 83       	st	Z, r18
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    21fa:	0f 90       	pop	r0
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

00002202 <UART_recieveByte>:

uint8 UART_recieveByte(void) {
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    220a:	00 00       	nop
    220c:	8b e2       	ldi	r24, 0x2B	; 43
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	fc 01       	movw	r30, r24
    2212:	80 81       	ld	r24, Z
    2214:	88 23       	and	r24, r24
    2216:	d4 f7       	brge	.-12     	; 0x220c <UART_recieveByte+0xa>
	}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	 will be cleared after read this data */
	return UDR;
    2218:	8c e2       	ldi	r24, 0x2C	; 44
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	fc 01       	movw	r30, r24
    221e:	80 81       	ld	r24, Z
}
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <UART_sendString>:

void UART_sendString(const uint8 *Str) {
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <UART_sendString+0x6>
    222c:	1f 92       	push	r1
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2236:	19 82       	std	Y+1, r1	; 0x01
	while (Str[i] != '\0') {
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <UART_sendString+0x30>
		UART_sendByte(Str[i]);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	2a 81       	ldd	r18, Y+2	; 0x02
    2242:	3b 81       	ldd	r19, Y+3	; 0x03
    2244:	82 0f       	add	r24, r18
    2246:	93 1f       	adc	r25, r19
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
    224c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <UART_sendByte>
		i++;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(const uint8 *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	2a 81       	ldd	r18, Y+2	; 0x02
    225e:	3b 81       	ldd	r19, Y+3	; 0x03
    2260:	82 0f       	add	r24, r18
    2262:	93 1f       	adc	r25, r19
    2264:	fc 01       	movw	r30, r24
    2266:	80 81       	ld	r24, Z
    2268:	88 23       	and	r24, r24
    226a:	39 f7       	brne	.-50     	; 0x223a <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }		
	 *******************************************************************/
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <UART_receiveString>:

void UART_receiveString(uint8 *Str) {
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	00 d0       	rcall	.+0      	; 0x2282 <UART_receiveString+0xa>
    2282:	1f 92       	push	r1
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	9b 83       	std	Y+3, r25	; 0x03
    228a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    228c:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	2a 81       	ldd	r18, Y+2	; 0x02
    2296:	3b 81       	ldd	r19, Y+3	; 0x03
    2298:	89 01       	movw	r16, r18
    229a:	08 0f       	add	r16, r24
    229c:	19 1f       	adc	r17, r25
    229e:	0e 94 01 11 	call	0x2202	; 0x2202 <UART_recieveByte>
    22a2:	f8 01       	movw	r30, r16
    22a4:	80 83       	st	Z, r24
	while (Str[i] != '#') {
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <UART_receiveString+0x4e>
		i++;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	2a 81       	ldd	r18, Y+2	; 0x02
    22b6:	3b 81       	ldd	r19, Y+3	; 0x03
    22b8:	89 01       	movw	r16, r18
    22ba:	08 0f       	add	r16, r24
    22bc:	19 1f       	adc	r17, r25
    22be:	0e 94 01 11 	call	0x2202	; 0x2202 <UART_recieveByte>
    22c2:	f8 01       	movw	r30, r16
    22c4:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *Str) {
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while (Str[i] != '#') {
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	2a 81       	ldd	r18, Y+2	; 0x02
    22ce:	3b 81       	ldd	r19, Y+3	; 0x03
    22d0:	82 0f       	add	r24, r18
    22d2:	93 1f       	adc	r25, r19
    22d4:	fc 01       	movw	r30, r24
    22d6:	80 81       	ld	r24, Z
    22d8:	83 32       	cpi	r24, 0x23	; 35
    22da:	31 f7       	brne	.-52     	; 0x22a8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	2a 81       	ldd	r18, Y+2	; 0x02
    22e4:	3b 81       	ldd	r19, Y+3	; 0x03
    22e6:	82 0f       	add	r24, r18
    22e8:	93 1f       	adc	r25, r19
    22ea:	fc 01       	movw	r30, r24
    22ec:	10 82       	st	Z, r1
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	1f 91       	pop	r17
    22fa:	0f 91       	pop	r16
    22fc:	08 95       	ret

000022fe <__cmpsf2>:
    22fe:	0e 94 b3 11 	call	0x2366	; 0x2366 <__fp_cmp>
    2302:	08 f4       	brcc	.+2      	; 0x2306 <__cmpsf2+0x8>
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	08 95       	ret

00002308 <__fixunssfsi>:
    2308:	0e 94 df 11 	call	0x23be	; 0x23be <__fp_splitA>
    230c:	88 f0       	brcs	.+34     	; 0x2330 <__fixunssfsi+0x28>
    230e:	9f 57       	subi	r25, 0x7F	; 127
    2310:	98 f0       	brcs	.+38     	; 0x2338 <__fixunssfsi+0x30>
    2312:	b9 2f       	mov	r27, r25
    2314:	99 27       	eor	r25, r25
    2316:	b7 51       	subi	r27, 0x17	; 23
    2318:	b0 f0       	brcs	.+44     	; 0x2346 <__fixunssfsi+0x3e>
    231a:	e1 f0       	breq	.+56     	; 0x2354 <__fixunssfsi+0x4c>
    231c:	66 0f       	add	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	1a f0       	brmi	.+6      	; 0x232c <__fixunssfsi+0x24>
    2326:	ba 95       	dec	r27
    2328:	c9 f7       	brne	.-14     	; 0x231c <__fixunssfsi+0x14>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <__fixunssfsi+0x4c>
    232c:	b1 30       	cpi	r27, 0x01	; 1
    232e:	91 f0       	breq	.+36     	; 0x2354 <__fixunssfsi+0x4c>
    2330:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__fp_zero>
    2334:	b1 e0       	ldi	r27, 0x01	; 1
    2336:	08 95       	ret
    2338:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__fp_zero>
    233c:	67 2f       	mov	r22, r23
    233e:	78 2f       	mov	r23, r24
    2340:	88 27       	eor	r24, r24
    2342:	b8 5f       	subi	r27, 0xF8	; 248
    2344:	39 f0       	breq	.+14     	; 0x2354 <__fixunssfsi+0x4c>
    2346:	b9 3f       	cpi	r27, 0xF9	; 249
    2348:	cc f3       	brlt	.-14     	; 0x233c <__fixunssfsi+0x34>
    234a:	86 95       	lsr	r24
    234c:	77 95       	ror	r23
    234e:	67 95       	ror	r22
    2350:	b3 95       	inc	r27
    2352:	d9 f7       	brne	.-10     	; 0x234a <__fixunssfsi+0x42>
    2354:	3e f4       	brtc	.+14     	; 0x2364 <__fixunssfsi+0x5c>
    2356:	90 95       	com	r25
    2358:	80 95       	com	r24
    235a:	70 95       	com	r23
    235c:	61 95       	neg	r22
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	8f 4f       	sbci	r24, 0xFF	; 255
    2362:	9f 4f       	sbci	r25, 0xFF	; 255
    2364:	08 95       	ret

00002366 <__fp_cmp>:
    2366:	99 0f       	add	r25, r25
    2368:	00 08       	sbc	r0, r0
    236a:	55 0f       	add	r21, r21
    236c:	aa 0b       	sbc	r26, r26
    236e:	e0 e8       	ldi	r30, 0x80	; 128
    2370:	fe ef       	ldi	r31, 0xFE	; 254
    2372:	16 16       	cp	r1, r22
    2374:	17 06       	cpc	r1, r23
    2376:	e8 07       	cpc	r30, r24
    2378:	f9 07       	cpc	r31, r25
    237a:	c0 f0       	brcs	.+48     	; 0x23ac <__fp_cmp+0x46>
    237c:	12 16       	cp	r1, r18
    237e:	13 06       	cpc	r1, r19
    2380:	e4 07       	cpc	r30, r20
    2382:	f5 07       	cpc	r31, r21
    2384:	98 f0       	brcs	.+38     	; 0x23ac <__fp_cmp+0x46>
    2386:	62 1b       	sub	r22, r18
    2388:	73 0b       	sbc	r23, r19
    238a:	84 0b       	sbc	r24, r20
    238c:	95 0b       	sbc	r25, r21
    238e:	39 f4       	brne	.+14     	; 0x239e <__fp_cmp+0x38>
    2390:	0a 26       	eor	r0, r26
    2392:	61 f0       	breq	.+24     	; 0x23ac <__fp_cmp+0x46>
    2394:	23 2b       	or	r18, r19
    2396:	24 2b       	or	r18, r20
    2398:	25 2b       	or	r18, r21
    239a:	21 f4       	brne	.+8      	; 0x23a4 <__fp_cmp+0x3e>
    239c:	08 95       	ret
    239e:	0a 26       	eor	r0, r26
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__fp_cmp+0x3e>
    23a2:	a1 40       	sbci	r26, 0x01	; 1
    23a4:	a6 95       	lsr	r26
    23a6:	8f ef       	ldi	r24, 0xFF	; 255
    23a8:	81 1d       	adc	r24, r1
    23aa:	81 1d       	adc	r24, r1
    23ac:	08 95       	ret

000023ae <__fp_split3>:
    23ae:	57 fd       	sbrc	r21, 7
    23b0:	90 58       	subi	r25, 0x80	; 128
    23b2:	44 0f       	add	r20, r20
    23b4:	55 1f       	adc	r21, r21
    23b6:	59 f0       	breq	.+22     	; 0x23ce <__fp_splitA+0x10>
    23b8:	5f 3f       	cpi	r21, 0xFF	; 255
    23ba:	71 f0       	breq	.+28     	; 0x23d8 <__fp_splitA+0x1a>
    23bc:	47 95       	ror	r20

000023be <__fp_splitA>:
    23be:	88 0f       	add	r24, r24
    23c0:	97 fb       	bst	r25, 7
    23c2:	99 1f       	adc	r25, r25
    23c4:	61 f0       	breq	.+24     	; 0x23de <__fp_splitA+0x20>
    23c6:	9f 3f       	cpi	r25, 0xFF	; 255
    23c8:	79 f0       	breq	.+30     	; 0x23e8 <__fp_splitA+0x2a>
    23ca:	87 95       	ror	r24
    23cc:	08 95       	ret
    23ce:	12 16       	cp	r1, r18
    23d0:	13 06       	cpc	r1, r19
    23d2:	14 06       	cpc	r1, r20
    23d4:	55 1f       	adc	r21, r21
    23d6:	f2 cf       	rjmp	.-28     	; 0x23bc <__fp_split3+0xe>
    23d8:	46 95       	lsr	r20
    23da:	f1 df       	rcall	.-30     	; 0x23be <__fp_splitA>
    23dc:	08 c0       	rjmp	.+16     	; 0x23ee <__fp_splitA+0x30>
    23de:	16 16       	cp	r1, r22
    23e0:	17 06       	cpc	r1, r23
    23e2:	18 06       	cpc	r1, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	f1 cf       	rjmp	.-30     	; 0x23ca <__fp_splitA+0xc>
    23e8:	86 95       	lsr	r24
    23ea:	71 05       	cpc	r23, r1
    23ec:	61 05       	cpc	r22, r1
    23ee:	08 94       	sec
    23f0:	08 95       	ret

000023f2 <__fp_zero>:
    23f2:	e8 94       	clt

000023f4 <__fp_szero>:
    23f4:	bb 27       	eor	r27, r27
    23f6:	66 27       	eor	r22, r22
    23f8:	77 27       	eor	r23, r23
    23fa:	cb 01       	movw	r24, r22
    23fc:	97 f9       	bld	r25, 7
    23fe:	08 95       	ret

00002400 <__gesf2>:
    2400:	0e 94 b3 11 	call	0x2366	; 0x2366 <__fp_cmp>
    2404:	08 f4       	brcc	.+2      	; 0x2408 <__gesf2+0x8>
    2406:	8f ef       	ldi	r24, 0xFF	; 255
    2408:	08 95       	ret

0000240a <__mulsf3>:
    240a:	0e 94 18 12 	call	0x2430	; 0x2430 <__mulsf3x>
    240e:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__fp_round>
    2412:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__fp_pscA>
    2416:	38 f0       	brcs	.+14     	; 0x2426 <__mulsf3+0x1c>
    2418:	0e 94 82 12 	call	0x2504	; 0x2504 <__fp_pscB>
    241c:	20 f0       	brcs	.+8      	; 0x2426 <__mulsf3+0x1c>
    241e:	95 23       	and	r25, r21
    2420:	11 f0       	breq	.+4      	; 0x2426 <__mulsf3+0x1c>
    2422:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>
    2426:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__fp_nan>
    242a:	11 24       	eor	r1, r1
    242c:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__fp_szero>

00002430 <__mulsf3x>:
    2430:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__fp_split3>
    2434:	70 f3       	brcs	.-36     	; 0x2412 <__mulsf3+0x8>

00002436 <__mulsf3_pse>:
    2436:	95 9f       	mul	r25, r21
    2438:	c1 f3       	breq	.-16     	; 0x242a <__mulsf3+0x20>
    243a:	95 0f       	add	r25, r21
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	55 1f       	adc	r21, r21
    2440:	62 9f       	mul	r22, r18
    2442:	f0 01       	movw	r30, r0
    2444:	72 9f       	mul	r23, r18
    2446:	bb 27       	eor	r27, r27
    2448:	f0 0d       	add	r31, r0
    244a:	b1 1d       	adc	r27, r1
    244c:	63 9f       	mul	r22, r19
    244e:	aa 27       	eor	r26, r26
    2450:	f0 0d       	add	r31, r0
    2452:	b1 1d       	adc	r27, r1
    2454:	aa 1f       	adc	r26, r26
    2456:	64 9f       	mul	r22, r20
    2458:	66 27       	eor	r22, r22
    245a:	b0 0d       	add	r27, r0
    245c:	a1 1d       	adc	r26, r1
    245e:	66 1f       	adc	r22, r22
    2460:	82 9f       	mul	r24, r18
    2462:	22 27       	eor	r18, r18
    2464:	b0 0d       	add	r27, r0
    2466:	a1 1d       	adc	r26, r1
    2468:	62 1f       	adc	r22, r18
    246a:	73 9f       	mul	r23, r19
    246c:	b0 0d       	add	r27, r0
    246e:	a1 1d       	adc	r26, r1
    2470:	62 1f       	adc	r22, r18
    2472:	83 9f       	mul	r24, r19
    2474:	a0 0d       	add	r26, r0
    2476:	61 1d       	adc	r22, r1
    2478:	22 1f       	adc	r18, r18
    247a:	74 9f       	mul	r23, r20
    247c:	33 27       	eor	r19, r19
    247e:	a0 0d       	add	r26, r0
    2480:	61 1d       	adc	r22, r1
    2482:	23 1f       	adc	r18, r19
    2484:	84 9f       	mul	r24, r20
    2486:	60 0d       	add	r22, r0
    2488:	21 1d       	adc	r18, r1
    248a:	82 2f       	mov	r24, r18
    248c:	76 2f       	mov	r23, r22
    248e:	6a 2f       	mov	r22, r26
    2490:	11 24       	eor	r1, r1
    2492:	9f 57       	subi	r25, 0x7F	; 127
    2494:	50 40       	sbci	r21, 0x00	; 0
    2496:	9a f0       	brmi	.+38     	; 0x24be <__mulsf3_pse+0x88>
    2498:	f1 f0       	breq	.+60     	; 0x24d6 <__mulsf3_pse+0xa0>
    249a:	88 23       	and	r24, r24
    249c:	4a f0       	brmi	.+18     	; 0x24b0 <__mulsf3_pse+0x7a>
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	bb 1f       	adc	r27, r27
    24a4:	66 1f       	adc	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	88 1f       	adc	r24, r24
    24aa:	91 50       	subi	r25, 0x01	; 1
    24ac:	50 40       	sbci	r21, 0x00	; 0
    24ae:	a9 f7       	brne	.-22     	; 0x249a <__mulsf3_pse+0x64>
    24b0:	9e 3f       	cpi	r25, 0xFE	; 254
    24b2:	51 05       	cpc	r21, r1
    24b4:	80 f0       	brcs	.+32     	; 0x24d6 <__mulsf3_pse+0xa0>
    24b6:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__fp_inf>
    24ba:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__fp_szero>
    24be:	5f 3f       	cpi	r21, 0xFF	; 255
    24c0:	e4 f3       	brlt	.-8      	; 0x24ba <__mulsf3_pse+0x84>
    24c2:	98 3e       	cpi	r25, 0xE8	; 232
    24c4:	d4 f3       	brlt	.-12     	; 0x24ba <__mulsf3_pse+0x84>
    24c6:	86 95       	lsr	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	b7 95       	ror	r27
    24ce:	f7 95       	ror	r31
    24d0:	e7 95       	ror	r30
    24d2:	9f 5f       	subi	r25, 0xFF	; 255
    24d4:	c1 f7       	brne	.-16     	; 0x24c6 <__mulsf3_pse+0x90>
    24d6:	fe 2b       	or	r31, r30
    24d8:	88 0f       	add	r24, r24
    24da:	91 1d       	adc	r25, r1
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	97 f9       	bld	r25, 7
    24e2:	08 95       	ret

000024e4 <__fp_inf>:
    24e4:	97 f9       	bld	r25, 7
    24e6:	9f 67       	ori	r25, 0x7F	; 127
    24e8:	80 e8       	ldi	r24, 0x80	; 128
    24ea:	70 e0       	ldi	r23, 0x00	; 0
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	08 95       	ret

000024f0 <__fp_nan>:
    24f0:	9f ef       	ldi	r25, 0xFF	; 255
    24f2:	80 ec       	ldi	r24, 0xC0	; 192
    24f4:	08 95       	ret

000024f6 <__fp_pscA>:
    24f6:	00 24       	eor	r0, r0
    24f8:	0a 94       	dec	r0
    24fa:	16 16       	cp	r1, r22
    24fc:	17 06       	cpc	r1, r23
    24fe:	18 06       	cpc	r1, r24
    2500:	09 06       	cpc	r0, r25
    2502:	08 95       	ret

00002504 <__fp_pscB>:
    2504:	00 24       	eor	r0, r0
    2506:	0a 94       	dec	r0
    2508:	12 16       	cp	r1, r18
    250a:	13 06       	cpc	r1, r19
    250c:	14 06       	cpc	r1, r20
    250e:	05 06       	cpc	r0, r21
    2510:	08 95       	ret

00002512 <__fp_round>:
    2512:	09 2e       	mov	r0, r25
    2514:	03 94       	inc	r0
    2516:	00 0c       	add	r0, r0
    2518:	11 f4       	brne	.+4      	; 0x251e <__fp_round+0xc>
    251a:	88 23       	and	r24, r24
    251c:	52 f0       	brmi	.+20     	; 0x2532 <__fp_round+0x20>
    251e:	bb 0f       	add	r27, r27
    2520:	40 f4       	brcc	.+16     	; 0x2532 <__fp_round+0x20>
    2522:	bf 2b       	or	r27, r31
    2524:	11 f4       	brne	.+4      	; 0x252a <__fp_round+0x18>
    2526:	60 ff       	sbrs	r22, 0
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <__fp_round+0x20>
    252a:	6f 5f       	subi	r22, 0xFF	; 255
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	8f 4f       	sbci	r24, 0xFF	; 255
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	08 95       	ret

00002534 <memset>:
    2534:	dc 01       	movw	r26, r24
    2536:	01 c0       	rjmp	.+2      	; 0x253a <memset+0x6>
    2538:	6d 93       	st	X+, r22
    253a:	41 50       	subi	r20, 0x01	; 1
    253c:	50 40       	sbci	r21, 0x00	; 0
    253e:	e0 f7       	brcc	.-8      	; 0x2538 <memset+0x4>
    2540:	08 95       	ret

00002542 <strlen>:
    2542:	fc 01       	movw	r30, r24
    2544:	01 90       	ld	r0, Z+
    2546:	00 20       	and	r0, r0
    2548:	e9 f7       	brne	.-6      	; 0x2544 <strlen+0x2>
    254a:	80 95       	com	r24
    254c:	90 95       	com	r25
    254e:	8e 0f       	add	r24, r30
    2550:	9f 1f       	adc	r25, r31
    2552:	08 95       	ret

00002554 <strncpy>:
    2554:	fb 01       	movw	r30, r22
    2556:	dc 01       	movw	r26, r24
    2558:	41 50       	subi	r20, 0x01	; 1
    255a:	50 40       	sbci	r21, 0x00	; 0
    255c:	48 f0       	brcs	.+18     	; 0x2570 <strncpy+0x1c>
    255e:	01 90       	ld	r0, Z+
    2560:	0d 92       	st	X+, r0
    2562:	00 20       	and	r0, r0
    2564:	c9 f7       	brne	.-14     	; 0x2558 <strncpy+0x4>
    2566:	01 c0       	rjmp	.+2      	; 0x256a <strncpy+0x16>
    2568:	1d 92       	st	X+, r1
    256a:	41 50       	subi	r20, 0x01	; 1
    256c:	50 40       	sbci	r21, 0x00	; 0
    256e:	e0 f7       	brcc	.-8      	; 0x2568 <strncpy+0x14>
    2570:	08 95       	ret

00002572 <strstr>:
    2572:	fb 01       	movw	r30, r22
    2574:	51 91       	ld	r21, Z+
    2576:	55 23       	and	r21, r21
    2578:	a9 f0       	breq	.+42     	; 0x25a4 <strstr+0x32>
    257a:	bf 01       	movw	r22, r30
    257c:	dc 01       	movw	r26, r24
    257e:	4d 91       	ld	r20, X+
    2580:	45 17       	cp	r20, r21
    2582:	41 11       	cpse	r20, r1
    2584:	e1 f7       	brne	.-8      	; 0x257e <strstr+0xc>
    2586:	59 f4       	brne	.+22     	; 0x259e <strstr+0x2c>
    2588:	cd 01       	movw	r24, r26
    258a:	01 90       	ld	r0, Z+
    258c:	00 20       	and	r0, r0
    258e:	49 f0       	breq	.+18     	; 0x25a2 <strstr+0x30>
    2590:	4d 91       	ld	r20, X+
    2592:	40 15       	cp	r20, r0
    2594:	41 11       	cpse	r20, r1
    2596:	c9 f3       	breq	.-14     	; 0x258a <strstr+0x18>
    2598:	fb 01       	movw	r30, r22
    259a:	41 11       	cpse	r20, r1
    259c:	ef cf       	rjmp	.-34     	; 0x257c <strstr+0xa>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	08 95       	ret

000025a6 <itoa>:
    25a6:	45 32       	cpi	r20, 0x25	; 37
    25a8:	51 05       	cpc	r21, r1
    25aa:	20 f4       	brcc	.+8      	; 0x25b4 <itoa+0xe>
    25ac:	42 30       	cpi	r20, 0x02	; 2
    25ae:	10 f0       	brcs	.+4      	; 0x25b4 <itoa+0xe>
    25b0:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__itoa_ncheck>
    25b4:	fb 01       	movw	r30, r22
    25b6:	10 82       	st	Z, r1
    25b8:	cb 01       	movw	r24, r22
    25ba:	08 95       	ret

000025bc <__itoa_ncheck>:
    25bc:	bb 27       	eor	r27, r27
    25be:	4a 30       	cpi	r20, 0x0A	; 10
    25c0:	31 f4       	brne	.+12     	; 0x25ce <__itoa_ncheck+0x12>
    25c2:	99 23       	and	r25, r25
    25c4:	22 f4       	brpl	.+8      	; 0x25ce <__itoa_ncheck+0x12>
    25c6:	bd e2       	ldi	r27, 0x2D	; 45
    25c8:	90 95       	com	r25
    25ca:	81 95       	neg	r24
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__utoa_common>

000025d2 <__utoa_ncheck>:
    25d2:	bb 27       	eor	r27, r27

000025d4 <__utoa_common>:
    25d4:	fb 01       	movw	r30, r22
    25d6:	55 27       	eor	r21, r21
    25d8:	aa 27       	eor	r26, r26
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	aa 1f       	adc	r26, r26
    25e0:	a4 17       	cp	r26, r20
    25e2:	10 f0       	brcs	.+4      	; 0x25e8 <__utoa_common+0x14>
    25e4:	a4 1b       	sub	r26, r20
    25e6:	83 95       	inc	r24
    25e8:	50 51       	subi	r21, 0x10	; 16
    25ea:	b9 f7       	brne	.-18     	; 0x25da <__utoa_common+0x6>
    25ec:	a0 5d       	subi	r26, 0xD0	; 208
    25ee:	aa 33       	cpi	r26, 0x3A	; 58
    25f0:	08 f0       	brcs	.+2      	; 0x25f4 <__utoa_common+0x20>
    25f2:	a9 5d       	subi	r26, 0xD9	; 217
    25f4:	a1 93       	st	Z+, r26
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	79 f7       	brne	.-34     	; 0x25d8 <__utoa_common+0x4>
    25fa:	b1 11       	cpse	r27, r1
    25fc:	b1 93       	st	Z+, r27
    25fe:	11 92       	st	Z+, r1
    2600:	cb 01       	movw	r24, r22
    2602:	0c 94 03 13 	jmp	0x2606	; 0x2606 <strrev>

00002606 <strrev>:
    2606:	dc 01       	movw	r26, r24
    2608:	fc 01       	movw	r30, r24
    260a:	67 2f       	mov	r22, r23
    260c:	71 91       	ld	r23, Z+
    260e:	77 23       	and	r23, r23
    2610:	e1 f7       	brne	.-8      	; 0x260a <strrev+0x4>
    2612:	32 97       	sbiw	r30, 0x02	; 2
    2614:	04 c0       	rjmp	.+8      	; 0x261e <strrev+0x18>
    2616:	7c 91       	ld	r23, X
    2618:	6d 93       	st	X+, r22
    261a:	70 83       	st	Z, r23
    261c:	62 91       	ld	r22, -Z
    261e:	ae 17       	cp	r26, r30
    2620:	bf 07       	cpc	r27, r31
    2622:	c8 f3       	brcs	.-14     	; 0x2616 <strrev+0x10>
    2624:	08 95       	ret

00002626 <_exit>:
    2626:	f8 94       	cli

00002628 <__stop_program>:
    2628:	ff cf       	rjmp	.-2      	; 0x2628 <__stop_program>
